// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ports

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/utking/spaces/internal/application/domain"
)

// NewMockBookmarkService creates a new instance of MockBookmarkService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBookmarkService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBookmarkService {
	mock := &MockBookmarkService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBookmarkService is an autogenerated mock type for the BookmarkService type
type MockBookmarkService struct {
	mock.Mock
}

type MockBookmarkService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBookmarkService) EXPECT() *MockBookmarkService_Expecter {
	return &MockBookmarkService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockBookmarkService
func (_mock *MockBookmarkService) Create(ctx context.Context, uid string, req *domain.Bookmark) (string, error) {
	ret := _mock.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.Bookmark) (string, error)); ok {
		return returnFunc(ctx, uid, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.Bookmark) string); ok {
		r0 = returnFunc(ctx, uid, req)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.Bookmark) error); ok {
		r1 = returnFunc(ctx, uid, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBookmarkService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockBookmarkService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req *domain.Bookmark
func (_e *MockBookmarkService_Expecter) Create(ctx interface{}, uid interface{}, req interface{}) *MockBookmarkService_Create_Call {
	return &MockBookmarkService_Create_Call{Call: _e.mock.On("Create", ctx, uid, req)}
}

func (_c *MockBookmarkService_Create_Call) Run(run func(ctx context.Context, uid string, req *domain.Bookmark)) *MockBookmarkService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.Bookmark
		if args[2] != nil {
			arg2 = args[2].(*domain.Bookmark)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockBookmarkService_Create_Call) Return(s string, err error) *MockBookmarkService_Create_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockBookmarkService_Create_Call) RunAndReturn(run func(ctx context.Context, uid string, req *domain.Bookmark) (string, error)) *MockBookmarkService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockBookmarkService
func (_mock *MockBookmarkService) Delete(ctx context.Context, uid string, id string) error {
	ret := _mock.Called(ctx, uid, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, uid, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBookmarkService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockBookmarkService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - id string
func (_e *MockBookmarkService_Expecter) Delete(ctx interface{}, uid interface{}, id interface{}) *MockBookmarkService_Delete_Call {
	return &MockBookmarkService_Delete_Call{Call: _e.mock.On("Delete", ctx, uid, id)}
}

func (_c *MockBookmarkService_Delete_Call) Run(run func(ctx context.Context, uid string, id string)) *MockBookmarkService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockBookmarkService_Delete_Call) Return(err error) *MockBookmarkService_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBookmarkService_Delete_Call) RunAndReturn(run func(ctx context.Context, uid string, id string) error) *MockBookmarkService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetCount provides a mock function for the type MockBookmarkService
func (_mock *MockBookmarkService) GetCount(ctx context.Context, uid string, req *domain.BookmarkSearchRequest) (int64, error) {
	ret := _mock.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for GetCount")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.BookmarkSearchRequest) (int64, error)); ok {
		return returnFunc(ctx, uid, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.BookmarkSearchRequest) int64); ok {
		r0 = returnFunc(ctx, uid, req)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.BookmarkSearchRequest) error); ok {
		r1 = returnFunc(ctx, uid, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBookmarkService_GetCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCount'
type MockBookmarkService_GetCount_Call struct {
	*mock.Call
}

// GetCount is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req *domain.BookmarkSearchRequest
func (_e *MockBookmarkService_Expecter) GetCount(ctx interface{}, uid interface{}, req interface{}) *MockBookmarkService_GetCount_Call {
	return &MockBookmarkService_GetCount_Call{Call: _e.mock.On("GetCount", ctx, uid, req)}
}

func (_c *MockBookmarkService_GetCount_Call) Run(run func(ctx context.Context, uid string, req *domain.BookmarkSearchRequest)) *MockBookmarkService_GetCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.BookmarkSearchRequest
		if args[2] != nil {
			arg2 = args[2].(*domain.BookmarkSearchRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockBookmarkService_GetCount_Call) Return(n int64, err error) *MockBookmarkService_GetCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockBookmarkService_GetCount_Call) RunAndReturn(run func(ctx context.Context, uid string, req *domain.BookmarkSearchRequest) (int64, error)) *MockBookmarkService_GetCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetItem provides a mock function for the type MockBookmarkService
func (_mock *MockBookmarkService) GetItem(ctx context.Context, uid string, id string) (*domain.Bookmark, error) {
	ret := _mock.Called(ctx, uid, id)

	if len(ret) == 0 {
		panic("no return value specified for GetItem")
	}

	var r0 *domain.Bookmark
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*domain.Bookmark, error)); ok {
		return returnFunc(ctx, uid, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *domain.Bookmark); ok {
		r0 = returnFunc(ctx, uid, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Bookmark)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, uid, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBookmarkService_GetItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItem'
type MockBookmarkService_GetItem_Call struct {
	*mock.Call
}

// GetItem is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - id string
func (_e *MockBookmarkService_Expecter) GetItem(ctx interface{}, uid interface{}, id interface{}) *MockBookmarkService_GetItem_Call {
	return &MockBookmarkService_GetItem_Call{Call: _e.mock.On("GetItem", ctx, uid, id)}
}

func (_c *MockBookmarkService_GetItem_Call) Run(run func(ctx context.Context, uid string, id string)) *MockBookmarkService_GetItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockBookmarkService_GetItem_Call) Return(bookmark *domain.Bookmark, err error) *MockBookmarkService_GetItem_Call {
	_c.Call.Return(bookmark, err)
	return _c
}

func (_c *MockBookmarkService_GetItem_Call) RunAndReturn(run func(ctx context.Context, uid string, id string) (*domain.Bookmark, error)) *MockBookmarkService_GetItem_Call {
	_c.Call.Return(run)
	return _c
}

// GetItems provides a mock function for the type MockBookmarkService
func (_mock *MockBookmarkService) GetItems(ctx context.Context, uid string, req *domain.BookmarkSearchRequest) ([]domain.Bookmark, error) {
	ret := _mock.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for GetItems")
	}

	var r0 []domain.Bookmark
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.BookmarkSearchRequest) ([]domain.Bookmark, error)); ok {
		return returnFunc(ctx, uid, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.BookmarkSearchRequest) []domain.Bookmark); ok {
		r0 = returnFunc(ctx, uid, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Bookmark)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.BookmarkSearchRequest) error); ok {
		r1 = returnFunc(ctx, uid, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBookmarkService_GetItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItems'
type MockBookmarkService_GetItems_Call struct {
	*mock.Call
}

// GetItems is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req *domain.BookmarkSearchRequest
func (_e *MockBookmarkService_Expecter) GetItems(ctx interface{}, uid interface{}, req interface{}) *MockBookmarkService_GetItems_Call {
	return &MockBookmarkService_GetItems_Call{Call: _e.mock.On("GetItems", ctx, uid, req)}
}

func (_c *MockBookmarkService_GetItems_Call) Run(run func(ctx context.Context, uid string, req *domain.BookmarkSearchRequest)) *MockBookmarkService_GetItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.BookmarkSearchRequest
		if args[2] != nil {
			arg2 = args[2].(*domain.BookmarkSearchRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockBookmarkService_GetItems_Call) Return(bookmarks []domain.Bookmark, err error) *MockBookmarkService_GetItems_Call {
	_c.Call.Return(bookmarks, err)
	return _c
}

func (_c *MockBookmarkService_GetItems_Call) RunAndReturn(run func(ctx context.Context, uid string, req *domain.BookmarkSearchRequest) ([]domain.Bookmark, error)) *MockBookmarkService_GetItems_Call {
	_c.Call.Return(run)
	return _c
}

// GetItemsMap provides a mock function for the type MockBookmarkService
func (_mock *MockBookmarkService) GetItemsMap(ctx context.Context, uid string, req *domain.BookmarkSearchRequest) ([]domain.Bookmark, error) {
	ret := _mock.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for GetItemsMap")
	}

	var r0 []domain.Bookmark
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.BookmarkSearchRequest) ([]domain.Bookmark, error)); ok {
		return returnFunc(ctx, uid, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.BookmarkSearchRequest) []domain.Bookmark); ok {
		r0 = returnFunc(ctx, uid, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Bookmark)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.BookmarkSearchRequest) error); ok {
		r1 = returnFunc(ctx, uid, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBookmarkService_GetItemsMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItemsMap'
type MockBookmarkService_GetItemsMap_Call struct {
	*mock.Call
}

// GetItemsMap is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req *domain.BookmarkSearchRequest
func (_e *MockBookmarkService_Expecter) GetItemsMap(ctx interface{}, uid interface{}, req interface{}) *MockBookmarkService_GetItemsMap_Call {
	return &MockBookmarkService_GetItemsMap_Call{Call: _e.mock.On("GetItemsMap", ctx, uid, req)}
}

func (_c *MockBookmarkService_GetItemsMap_Call) Run(run func(ctx context.Context, uid string, req *domain.BookmarkSearchRequest)) *MockBookmarkService_GetItemsMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.BookmarkSearchRequest
		if args[2] != nil {
			arg2 = args[2].(*domain.BookmarkSearchRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockBookmarkService_GetItemsMap_Call) Return(bookmarks []domain.Bookmark, err error) *MockBookmarkService_GetItemsMap_Call {
	_c.Call.Return(bookmarks, err)
	return _c
}

func (_c *MockBookmarkService_GetItemsMap_Call) RunAndReturn(run func(ctx context.Context, uid string, req *domain.BookmarkSearchRequest) ([]domain.Bookmark, error)) *MockBookmarkService_GetItemsMap_Call {
	_c.Call.Return(run)
	return _c
}

// GetTags provides a mock function for the type MockBookmarkService
func (_mock *MockBookmarkService) GetTags(ctx context.Context, uid string) ([]string, error) {
	ret := _mock.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for GetTags")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return returnFunc(ctx, uid)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = returnFunc(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBookmarkService_GetTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTags'
type MockBookmarkService_GetTags_Call struct {
	*mock.Call
}

// GetTags is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
func (_e *MockBookmarkService_Expecter) GetTags(ctx interface{}, uid interface{}) *MockBookmarkService_GetTags_Call {
	return &MockBookmarkService_GetTags_Call{Call: _e.mock.On("GetTags", ctx, uid)}
}

func (_c *MockBookmarkService_GetTags_Call) Run(run func(ctx context.Context, uid string)) *MockBookmarkService_GetTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBookmarkService_GetTags_Call) Return(strings []string, err error) *MockBookmarkService_GetTags_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockBookmarkService_GetTags_Call) RunAndReturn(run func(ctx context.Context, uid string) ([]string, error)) *MockBookmarkService_GetTags_Call {
	_c.Call.Return(run)
	return _c
}

// SearchItemsByTerm provides a mock function for the type MockBookmarkService
func (_mock *MockBookmarkService) SearchItemsByTerm(ctx context.Context, uid string, req *domain.BookmarkSearchRequest) ([]domain.Bookmark, error) {
	ret := _mock.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for SearchItemsByTerm")
	}

	var r0 []domain.Bookmark
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.BookmarkSearchRequest) ([]domain.Bookmark, error)); ok {
		return returnFunc(ctx, uid, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.BookmarkSearchRequest) []domain.Bookmark); ok {
		r0 = returnFunc(ctx, uid, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Bookmark)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.BookmarkSearchRequest) error); ok {
		r1 = returnFunc(ctx, uid, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBookmarkService_SearchItemsByTerm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchItemsByTerm'
type MockBookmarkService_SearchItemsByTerm_Call struct {
	*mock.Call
}

// SearchItemsByTerm is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req *domain.BookmarkSearchRequest
func (_e *MockBookmarkService_Expecter) SearchItemsByTerm(ctx interface{}, uid interface{}, req interface{}) *MockBookmarkService_SearchItemsByTerm_Call {
	return &MockBookmarkService_SearchItemsByTerm_Call{Call: _e.mock.On("SearchItemsByTerm", ctx, uid, req)}
}

func (_c *MockBookmarkService_SearchItemsByTerm_Call) Run(run func(ctx context.Context, uid string, req *domain.BookmarkSearchRequest)) *MockBookmarkService_SearchItemsByTerm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.BookmarkSearchRequest
		if args[2] != nil {
			arg2 = args[2].(*domain.BookmarkSearchRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockBookmarkService_SearchItemsByTerm_Call) Return(bookmarks []domain.Bookmark, err error) *MockBookmarkService_SearchItemsByTerm_Call {
	_c.Call.Return(bookmarks, err)
	return _c
}

func (_c *MockBookmarkService_SearchItemsByTerm_Call) RunAndReturn(run func(ctx context.Context, uid string, req *domain.BookmarkSearchRequest) ([]domain.Bookmark, error)) *MockBookmarkService_SearchItemsByTerm_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockBookmarkService
func (_mock *MockBookmarkService) Update(ctx context.Context, uid string, id string, req *domain.Bookmark) (int64, error) {
	ret := _mock.Called(ctx, uid, id, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, *domain.Bookmark) (int64, error)); ok {
		return returnFunc(ctx, uid, id, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, *domain.Bookmark) int64); ok {
		r0 = returnFunc(ctx, uid, id, req)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, *domain.Bookmark) error); ok {
		r1 = returnFunc(ctx, uid, id, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBookmarkService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockBookmarkService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - id string
//   - req *domain.Bookmark
func (_e *MockBookmarkService_Expecter) Update(ctx interface{}, uid interface{}, id interface{}, req interface{}) *MockBookmarkService_Update_Call {
	return &MockBookmarkService_Update_Call{Call: _e.mock.On("Update", ctx, uid, id, req)}
}

func (_c *MockBookmarkService_Update_Call) Run(run func(ctx context.Context, uid string, id string, req *domain.Bookmark)) *MockBookmarkService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 *domain.Bookmark
		if args[3] != nil {
			arg3 = args[3].(*domain.Bookmark)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockBookmarkService_Update_Call) Return(n int64, err error) *MockBookmarkService_Update_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockBookmarkService_Update_Call) RunAndReturn(run func(ctx context.Context, uid string, id string, req *domain.Bookmark) (int64, error)) *MockBookmarkService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDBPort creates a new instance of MockDBPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDBPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDBPort {
	mock := &MockDBPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDBPort is an autogenerated mock type for the DBPort type
type MockDBPort struct {
	mock.Mock
}

type MockDBPort_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDBPort) EXPECT() *MockDBPort_Expecter {
	return &MockDBPort_Expecter{mock: &_m.Mock}
}

// ChangePassword provides a mock function for the type MockDBPort
func (_mock *MockDBPort) ChangePassword(ctx context.Context, id string, newPassword string) error {
	ret := _mock.Called(ctx, id, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for ChangePassword")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, id, newPassword)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBPort_ChangePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangePassword'
type MockDBPort_ChangePassword_Call struct {
	*mock.Call
}

// ChangePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - newPassword string
func (_e *MockDBPort_Expecter) ChangePassword(ctx interface{}, id interface{}, newPassword interface{}) *MockDBPort_ChangePassword_Call {
	return &MockDBPort_ChangePassword_Call{Call: _e.mock.On("ChangePassword", ctx, id, newPassword)}
}

func (_c *MockDBPort_ChangePassword_Call) Run(run func(ctx context.Context, id string, newPassword string)) *MockDBPort_ChangePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBPort_ChangePassword_Call) Return(err error) *MockDBPort_ChangePassword_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBPort_ChangePassword_Call) RunAndReturn(run func(ctx context.Context, id string, newPassword string) error) *MockDBPort_ChangePassword_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBookmark provides a mock function for the type MockDBPort
func (_mock *MockDBPort) CreateBookmark(ctx context.Context, uid string, req *domain.Bookmark) (string, error) {
	ret := _mock.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateBookmark")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.Bookmark) (string, error)); ok {
		return returnFunc(ctx, uid, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.Bookmark) string); ok {
		r0 = returnFunc(ctx, uid, req)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.Bookmark) error); ok {
		r1 = returnFunc(ctx, uid, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_CreateBookmark_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBookmark'
type MockDBPort_CreateBookmark_Call struct {
	*mock.Call
}

// CreateBookmark is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req *domain.Bookmark
func (_e *MockDBPort_Expecter) CreateBookmark(ctx interface{}, uid interface{}, req interface{}) *MockDBPort_CreateBookmark_Call {
	return &MockDBPort_CreateBookmark_Call{Call: _e.mock.On("CreateBookmark", ctx, uid, req)}
}

func (_c *MockDBPort_CreateBookmark_Call) Run(run func(ctx context.Context, uid string, req *domain.Bookmark)) *MockDBPort_CreateBookmark_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.Bookmark
		if args[2] != nil {
			arg2 = args[2].(*domain.Bookmark)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBPort_CreateBookmark_Call) Return(s string, err error) *MockDBPort_CreateBookmark_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockDBPort_CreateBookmark_Call) RunAndReturn(run func(ctx context.Context, uid string, req *domain.Bookmark) (string, error)) *MockDBPort_CreateBookmark_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNote provides a mock function for the type MockDBPort
func (_mock *MockDBPort) CreateNote(ctx context.Context, uid string, req *domain.Note) (string, error) {
	ret := _mock.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateNote")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.Note) (string, error)); ok {
		return returnFunc(ctx, uid, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.Note) string); ok {
		r0 = returnFunc(ctx, uid, req)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.Note) error); ok {
		r1 = returnFunc(ctx, uid, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_CreateNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNote'
type MockDBPort_CreateNote_Call struct {
	*mock.Call
}

// CreateNote is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req *domain.Note
func (_e *MockDBPort_Expecter) CreateNote(ctx interface{}, uid interface{}, req interface{}) *MockDBPort_CreateNote_Call {
	return &MockDBPort_CreateNote_Call{Call: _e.mock.On("CreateNote", ctx, uid, req)}
}

func (_c *MockDBPort_CreateNote_Call) Run(run func(ctx context.Context, uid string, req *domain.Note)) *MockDBPort_CreateNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.Note
		if args[2] != nil {
			arg2 = args[2].(*domain.Note)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBPort_CreateNote_Call) Return(s string, err error) *MockDBPort_CreateNote_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockDBPort_CreateNote_Call) RunAndReturn(run func(ctx context.Context, uid string, req *domain.Note) (string, error)) *MockDBPort_CreateNote_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSecret provides a mock function for the type MockDBPort
func (_mock *MockDBPort) CreateSecret(ctx context.Context, uid string, req *domain.Secret) (string, error) {
	ret := _mock.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateSecret")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.Secret) (string, error)); ok {
		return returnFunc(ctx, uid, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.Secret) string); ok {
		r0 = returnFunc(ctx, uid, req)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.Secret) error); ok {
		r1 = returnFunc(ctx, uid, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_CreateSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSecret'
type MockDBPort_CreateSecret_Call struct {
	*mock.Call
}

// CreateSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req *domain.Secret
func (_e *MockDBPort_Expecter) CreateSecret(ctx interface{}, uid interface{}, req interface{}) *MockDBPort_CreateSecret_Call {
	return &MockDBPort_CreateSecret_Call{Call: _e.mock.On("CreateSecret", ctx, uid, req)}
}

func (_c *MockDBPort_CreateSecret_Call) Run(run func(ctx context.Context, uid string, req *domain.Secret)) *MockDBPort_CreateSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.Secret
		if args[2] != nil {
			arg2 = args[2].(*domain.Secret)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBPort_CreateSecret_Call) Return(s string, err error) *MockDBPort_CreateSecret_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockDBPort_CreateSecret_Call) RunAndReturn(run func(ctx context.Context, uid string, req *domain.Secret) (string, error)) *MockDBPort_CreateSecret_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function for the type MockDBPort
func (_mock *MockDBPort) CreateUser(ctx context.Context, req *domain.User) (string, string, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 string
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.User) (string, string, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.User) string); ok {
		r0 = returnFunc(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.User) string); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, *domain.User) error); ok {
		r2 = returnFunc(ctx, req)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockDBPort_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockDBPort_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - req *domain.User
func (_e *MockDBPort_Expecter) CreateUser(ctx interface{}, req interface{}) *MockDBPort_CreateUser_Call {
	return &MockDBPort_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, req)}
}

func (_c *MockDBPort_CreateUser_Call) Run(run func(ctx context.Context, req *domain.User)) *MockDBPort_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.User
		if args[1] != nil {
			arg1 = args[1].(*domain.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDBPort_CreateUser_Call) Return(s string, s1 string, err error) *MockDBPort_CreateUser_Call {
	_c.Call.Return(s, s1, err)
	return _c
}

func (_c *MockDBPort_CreateUser_Call) RunAndReturn(run func(ctx context.Context, req *domain.User) (string, string, error)) *MockDBPort_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBookmark provides a mock function for the type MockDBPort
func (_mock *MockDBPort) DeleteBookmark(ctx context.Context, uid string, id string) error {
	ret := _mock.Called(ctx, uid, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBookmark")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, uid, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBPort_DeleteBookmark_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBookmark'
type MockDBPort_DeleteBookmark_Call struct {
	*mock.Call
}

// DeleteBookmark is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - id string
func (_e *MockDBPort_Expecter) DeleteBookmark(ctx interface{}, uid interface{}, id interface{}) *MockDBPort_DeleteBookmark_Call {
	return &MockDBPort_DeleteBookmark_Call{Call: _e.mock.On("DeleteBookmark", ctx, uid, id)}
}

func (_c *MockDBPort_DeleteBookmark_Call) Run(run func(ctx context.Context, uid string, id string)) *MockDBPort_DeleteBookmark_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBPort_DeleteBookmark_Call) Return(err error) *MockDBPort_DeleteBookmark_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBPort_DeleteBookmark_Call) RunAndReturn(run func(ctx context.Context, uid string, id string) error) *MockDBPort_DeleteBookmark_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNote provides a mock function for the type MockDBPort
func (_mock *MockDBPort) DeleteNote(ctx context.Context, uid string, id string) error {
	ret := _mock.Called(ctx, uid, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNote")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, uid, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBPort_DeleteNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNote'
type MockDBPort_DeleteNote_Call struct {
	*mock.Call
}

// DeleteNote is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - id string
func (_e *MockDBPort_Expecter) DeleteNote(ctx interface{}, uid interface{}, id interface{}) *MockDBPort_DeleteNote_Call {
	return &MockDBPort_DeleteNote_Call{Call: _e.mock.On("DeleteNote", ctx, uid, id)}
}

func (_c *MockDBPort_DeleteNote_Call) Run(run func(ctx context.Context, uid string, id string)) *MockDBPort_DeleteNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBPort_DeleteNote_Call) Return(err error) *MockDBPort_DeleteNote_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBPort_DeleteNote_Call) RunAndReturn(run func(ctx context.Context, uid string, id string) error) *MockDBPort_DeleteNote_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSecret provides a mock function for the type MockDBPort
func (_mock *MockDBPort) DeleteSecret(ctx context.Context, uid string, id string) error {
	ret := _mock.Called(ctx, uid, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSecret")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, uid, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBPort_DeleteSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSecret'
type MockDBPort_DeleteSecret_Call struct {
	*mock.Call
}

// DeleteSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - id string
func (_e *MockDBPort_Expecter) DeleteSecret(ctx interface{}, uid interface{}, id interface{}) *MockDBPort_DeleteSecret_Call {
	return &MockDBPort_DeleteSecret_Call{Call: _e.mock.On("DeleteSecret", ctx, uid, id)}
}

func (_c *MockDBPort_DeleteSecret_Call) Run(run func(ctx context.Context, uid string, id string)) *MockDBPort_DeleteSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBPort_DeleteSecret_Call) Return(err error) *MockDBPort_DeleteSecret_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBPort_DeleteSecret_Call) RunAndReturn(run func(ctx context.Context, uid string, id string) error) *MockDBPort_DeleteSecret_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function for the type MockDBPort
func (_mock *MockDBPort) DeleteUser(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBPort_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockDBPort_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockDBPort_Expecter) DeleteUser(ctx interface{}, id interface{}) *MockDBPort_DeleteUser_Call {
	return &MockDBPort_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id)}
}

func (_c *MockDBPort_DeleteUser_Call) Run(run func(ctx context.Context, id string)) *MockDBPort_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDBPort_DeleteUser_Call) Return(err error) *MockDBPort_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBPort_DeleteUser_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockDBPort_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetBookmark provides a mock function for the type MockDBPort
func (_mock *MockDBPort) GetBookmark(ctx context.Context, uid string, id string) (*domain.Bookmark, error) {
	ret := _mock.Called(ctx, uid, id)

	if len(ret) == 0 {
		panic("no return value specified for GetBookmark")
	}

	var r0 *domain.Bookmark
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*domain.Bookmark, error)); ok {
		return returnFunc(ctx, uid, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *domain.Bookmark); ok {
		r0 = returnFunc(ctx, uid, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Bookmark)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, uid, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_GetBookmark_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBookmark'
type MockDBPort_GetBookmark_Call struct {
	*mock.Call
}

// GetBookmark is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - id string
func (_e *MockDBPort_Expecter) GetBookmark(ctx interface{}, uid interface{}, id interface{}) *MockDBPort_GetBookmark_Call {
	return &MockDBPort_GetBookmark_Call{Call: _e.mock.On("GetBookmark", ctx, uid, id)}
}

func (_c *MockDBPort_GetBookmark_Call) Run(run func(ctx context.Context, uid string, id string)) *MockDBPort_GetBookmark_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBPort_GetBookmark_Call) Return(bookmark *domain.Bookmark, err error) *MockDBPort_GetBookmark_Call {
	_c.Call.Return(bookmark, err)
	return _c
}

func (_c *MockDBPort_GetBookmark_Call) RunAndReturn(run func(ctx context.Context, uid string, id string) (*domain.Bookmark, error)) *MockDBPort_GetBookmark_Call {
	_c.Call.Return(run)
	return _c
}

// GetBookmarkTags provides a mock function for the type MockDBPort
func (_mock *MockDBPort) GetBookmarkTags(ctx context.Context, uid string) ([]string, error) {
	ret := _mock.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for GetBookmarkTags")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return returnFunc(ctx, uid)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = returnFunc(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_GetBookmarkTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBookmarkTags'
type MockDBPort_GetBookmarkTags_Call struct {
	*mock.Call
}

// GetBookmarkTags is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
func (_e *MockDBPort_Expecter) GetBookmarkTags(ctx interface{}, uid interface{}) *MockDBPort_GetBookmarkTags_Call {
	return &MockDBPort_GetBookmarkTags_Call{Call: _e.mock.On("GetBookmarkTags", ctx, uid)}
}

func (_c *MockDBPort_GetBookmarkTags_Call) Run(run func(ctx context.Context, uid string)) *MockDBPort_GetBookmarkTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDBPort_GetBookmarkTags_Call) Return(strings []string, err error) *MockDBPort_GetBookmarkTags_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockDBPort_GetBookmarkTags_Call) RunAndReturn(run func(ctx context.Context, uid string) ([]string, error)) *MockDBPort_GetBookmarkTags_Call {
	_c.Call.Return(run)
	return _c
}

// GetBookmarks provides a mock function for the type MockDBPort
func (_mock *MockDBPort) GetBookmarks(ctx context.Context, uid string, req *domain.BookmarkSearchRequest) ([]domain.Bookmark, error) {
	ret := _mock.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for GetBookmarks")
	}

	var r0 []domain.Bookmark
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.BookmarkSearchRequest) ([]domain.Bookmark, error)); ok {
		return returnFunc(ctx, uid, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.BookmarkSearchRequest) []domain.Bookmark); ok {
		r0 = returnFunc(ctx, uid, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Bookmark)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.BookmarkSearchRequest) error); ok {
		r1 = returnFunc(ctx, uid, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_GetBookmarks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBookmarks'
type MockDBPort_GetBookmarks_Call struct {
	*mock.Call
}

// GetBookmarks is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req *domain.BookmarkSearchRequest
func (_e *MockDBPort_Expecter) GetBookmarks(ctx interface{}, uid interface{}, req interface{}) *MockDBPort_GetBookmarks_Call {
	return &MockDBPort_GetBookmarks_Call{Call: _e.mock.On("GetBookmarks", ctx, uid, req)}
}

func (_c *MockDBPort_GetBookmarks_Call) Run(run func(ctx context.Context, uid string, req *domain.BookmarkSearchRequest)) *MockDBPort_GetBookmarks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.BookmarkSearchRequest
		if args[2] != nil {
			arg2 = args[2].(*domain.BookmarkSearchRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBPort_GetBookmarks_Call) Return(bookmarks []domain.Bookmark, err error) *MockDBPort_GetBookmarks_Call {
	_c.Call.Return(bookmarks, err)
	return _c
}

func (_c *MockDBPort_GetBookmarks_Call) RunAndReturn(run func(ctx context.Context, uid string, req *domain.BookmarkSearchRequest) ([]domain.Bookmark, error)) *MockDBPort_GetBookmarks_Call {
	_c.Call.Return(run)
	return _c
}

// GetBookmarksCount provides a mock function for the type MockDBPort
func (_mock *MockDBPort) GetBookmarksCount(ctx context.Context, uid string, req *domain.BookmarkSearchRequest) (int64, error) {
	ret := _mock.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for GetBookmarksCount")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.BookmarkSearchRequest) (int64, error)); ok {
		return returnFunc(ctx, uid, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.BookmarkSearchRequest) int64); ok {
		r0 = returnFunc(ctx, uid, req)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.BookmarkSearchRequest) error); ok {
		r1 = returnFunc(ctx, uid, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_GetBookmarksCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBookmarksCount'
type MockDBPort_GetBookmarksCount_Call struct {
	*mock.Call
}

// GetBookmarksCount is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req *domain.BookmarkSearchRequest
func (_e *MockDBPort_Expecter) GetBookmarksCount(ctx interface{}, uid interface{}, req interface{}) *MockDBPort_GetBookmarksCount_Call {
	return &MockDBPort_GetBookmarksCount_Call{Call: _e.mock.On("GetBookmarksCount", ctx, uid, req)}
}

func (_c *MockDBPort_GetBookmarksCount_Call) Run(run func(ctx context.Context, uid string, req *domain.BookmarkSearchRequest)) *MockDBPort_GetBookmarksCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.BookmarkSearchRequest
		if args[2] != nil {
			arg2 = args[2].(*domain.BookmarkSearchRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBPort_GetBookmarksCount_Call) Return(n int64, err error) *MockDBPort_GetBookmarksCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockDBPort_GetBookmarksCount_Call) RunAndReturn(run func(ctx context.Context, uid string, req *domain.BookmarkSearchRequest) (int64, error)) *MockDBPort_GetBookmarksCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetBookmarksMap provides a mock function for the type MockDBPort
func (_mock *MockDBPort) GetBookmarksMap(ctx context.Context, uid string, req *domain.BookmarkSearchRequest) ([]domain.Bookmark, error) {
	ret := _mock.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for GetBookmarksMap")
	}

	var r0 []domain.Bookmark
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.BookmarkSearchRequest) ([]domain.Bookmark, error)); ok {
		return returnFunc(ctx, uid, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.BookmarkSearchRequest) []domain.Bookmark); ok {
		r0 = returnFunc(ctx, uid, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Bookmark)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.BookmarkSearchRequest) error); ok {
		r1 = returnFunc(ctx, uid, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_GetBookmarksMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBookmarksMap'
type MockDBPort_GetBookmarksMap_Call struct {
	*mock.Call
}

// GetBookmarksMap is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req *domain.BookmarkSearchRequest
func (_e *MockDBPort_Expecter) GetBookmarksMap(ctx interface{}, uid interface{}, req interface{}) *MockDBPort_GetBookmarksMap_Call {
	return &MockDBPort_GetBookmarksMap_Call{Call: _e.mock.On("GetBookmarksMap", ctx, uid, req)}
}

func (_c *MockDBPort_GetBookmarksMap_Call) Run(run func(ctx context.Context, uid string, req *domain.BookmarkSearchRequest)) *MockDBPort_GetBookmarksMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.BookmarkSearchRequest
		if args[2] != nil {
			arg2 = args[2].(*domain.BookmarkSearchRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBPort_GetBookmarksMap_Call) Return(bookmarks []domain.Bookmark, err error) *MockDBPort_GetBookmarksMap_Call {
	_c.Call.Return(bookmarks, err)
	return _c
}

func (_c *MockDBPort_GetBookmarksMap_Call) RunAndReturn(run func(ctx context.Context, uid string, req *domain.BookmarkSearchRequest) ([]domain.Bookmark, error)) *MockDBPort_GetBookmarksMap_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastOpened provides a mock function for the type MockDBPort
func (_mock *MockDBPort) GetLastOpened(ctx context.Context, itemType domain.LastOpenedType, uid string) (string, error) {
	ret := _mock.Called(ctx, itemType, uid)

	if len(ret) == 0 {
		panic("no return value specified for GetLastOpened")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.LastOpenedType, string) (string, error)); ok {
		return returnFunc(ctx, itemType, uid)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.LastOpenedType, string) string); ok {
		r0 = returnFunc(ctx, itemType, uid)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.LastOpenedType, string) error); ok {
		r1 = returnFunc(ctx, itemType, uid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_GetLastOpened_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastOpened'
type MockDBPort_GetLastOpened_Call struct {
	*mock.Call
}

// GetLastOpened is a helper method to define mock.On call
//   - ctx context.Context
//   - itemType domain.LastOpenedType
//   - uid string
func (_e *MockDBPort_Expecter) GetLastOpened(ctx interface{}, itemType interface{}, uid interface{}) *MockDBPort_GetLastOpened_Call {
	return &MockDBPort_GetLastOpened_Call{Call: _e.mock.On("GetLastOpened", ctx, itemType, uid)}
}

func (_c *MockDBPort_GetLastOpened_Call) Run(run func(ctx context.Context, itemType domain.LastOpenedType, uid string)) *MockDBPort_GetLastOpened_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.LastOpenedType
		if args[1] != nil {
			arg1 = args[1].(domain.LastOpenedType)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBPort_GetLastOpened_Call) Return(s string, err error) *MockDBPort_GetLastOpened_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockDBPort_GetLastOpened_Call) RunAndReturn(run func(ctx context.Context, itemType domain.LastOpenedType, uid string) (string, error)) *MockDBPort_GetLastOpened_Call {
	_c.Call.Return(run)
	return _c
}

// GetNote provides a mock function for the type MockDBPort
func (_mock *MockDBPort) GetNote(ctx context.Context, uid string, id string) (*domain.Note, error) {
	ret := _mock.Called(ctx, uid, id)

	if len(ret) == 0 {
		panic("no return value specified for GetNote")
	}

	var r0 *domain.Note
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*domain.Note, error)); ok {
		return returnFunc(ctx, uid, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *domain.Note); ok {
		r0 = returnFunc(ctx, uid, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Note)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, uid, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_GetNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNote'
type MockDBPort_GetNote_Call struct {
	*mock.Call
}

// GetNote is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - id string
func (_e *MockDBPort_Expecter) GetNote(ctx interface{}, uid interface{}, id interface{}) *MockDBPort_GetNote_Call {
	return &MockDBPort_GetNote_Call{Call: _e.mock.On("GetNote", ctx, uid, id)}
}

func (_c *MockDBPort_GetNote_Call) Run(run func(ctx context.Context, uid string, id string)) *MockDBPort_GetNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBPort_GetNote_Call) Return(note *domain.Note, err error) *MockDBPort_GetNote_Call {
	_c.Call.Return(note, err)
	return _c
}

func (_c *MockDBPort_GetNote_Call) RunAndReturn(run func(ctx context.Context, uid string, id string) (*domain.Note, error)) *MockDBPort_GetNote_Call {
	_c.Call.Return(run)
	return _c
}

// GetNoteTags provides a mock function for the type MockDBPort
func (_mock *MockDBPort) GetNoteTags(ctx context.Context, uid string) ([]string, error) {
	ret := _mock.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for GetNoteTags")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return returnFunc(ctx, uid)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = returnFunc(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_GetNoteTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNoteTags'
type MockDBPort_GetNoteTags_Call struct {
	*mock.Call
}

// GetNoteTags is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
func (_e *MockDBPort_Expecter) GetNoteTags(ctx interface{}, uid interface{}) *MockDBPort_GetNoteTags_Call {
	return &MockDBPort_GetNoteTags_Call{Call: _e.mock.On("GetNoteTags", ctx, uid)}
}

func (_c *MockDBPort_GetNoteTags_Call) Run(run func(ctx context.Context, uid string)) *MockDBPort_GetNoteTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDBPort_GetNoteTags_Call) Return(strings []string, err error) *MockDBPort_GetNoteTags_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockDBPort_GetNoteTags_Call) RunAndReturn(run func(ctx context.Context, uid string) ([]string, error)) *MockDBPort_GetNoteTags_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotes provides a mock function for the type MockDBPort
func (_mock *MockDBPort) GetNotes(ctx context.Context, uid string, req *domain.NoteSearchRequest) ([]domain.Note, error) {
	ret := _mock.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for GetNotes")
	}

	var r0 []domain.Note
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.NoteSearchRequest) ([]domain.Note, error)); ok {
		return returnFunc(ctx, uid, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.NoteSearchRequest) []domain.Note); ok {
		r0 = returnFunc(ctx, uid, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Note)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.NoteSearchRequest) error); ok {
		r1 = returnFunc(ctx, uid, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_GetNotes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotes'
type MockDBPort_GetNotes_Call struct {
	*mock.Call
}

// GetNotes is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req *domain.NoteSearchRequest
func (_e *MockDBPort_Expecter) GetNotes(ctx interface{}, uid interface{}, req interface{}) *MockDBPort_GetNotes_Call {
	return &MockDBPort_GetNotes_Call{Call: _e.mock.On("GetNotes", ctx, uid, req)}
}

func (_c *MockDBPort_GetNotes_Call) Run(run func(ctx context.Context, uid string, req *domain.NoteSearchRequest)) *MockDBPort_GetNotes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.NoteSearchRequest
		if args[2] != nil {
			arg2 = args[2].(*domain.NoteSearchRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBPort_GetNotes_Call) Return(notes []domain.Note, err error) *MockDBPort_GetNotes_Call {
	_c.Call.Return(notes, err)
	return _c
}

func (_c *MockDBPort_GetNotes_Call) RunAndReturn(run func(ctx context.Context, uid string, req *domain.NoteSearchRequest) ([]domain.Note, error)) *MockDBPort_GetNotes_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotesCount provides a mock function for the type MockDBPort
func (_mock *MockDBPort) GetNotesCount(ctx context.Context, uid string, req *domain.NoteSearchRequest) (int64, error) {
	ret := _mock.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for GetNotesCount")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.NoteSearchRequest) (int64, error)); ok {
		return returnFunc(ctx, uid, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.NoteSearchRequest) int64); ok {
		r0 = returnFunc(ctx, uid, req)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.NoteSearchRequest) error); ok {
		r1 = returnFunc(ctx, uid, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_GetNotesCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotesCount'
type MockDBPort_GetNotesCount_Call struct {
	*mock.Call
}

// GetNotesCount is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req *domain.NoteSearchRequest
func (_e *MockDBPort_Expecter) GetNotesCount(ctx interface{}, uid interface{}, req interface{}) *MockDBPort_GetNotesCount_Call {
	return &MockDBPort_GetNotesCount_Call{Call: _e.mock.On("GetNotesCount", ctx, uid, req)}
}

func (_c *MockDBPort_GetNotesCount_Call) Run(run func(ctx context.Context, uid string, req *domain.NoteSearchRequest)) *MockDBPort_GetNotesCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.NoteSearchRequest
		if args[2] != nil {
			arg2 = args[2].(*domain.NoteSearchRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBPort_GetNotesCount_Call) Return(n int64, err error) *MockDBPort_GetNotesCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockDBPort_GetNotesCount_Call) RunAndReturn(run func(ctx context.Context, uid string, req *domain.NoteSearchRequest) (int64, error)) *MockDBPort_GetNotesCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotesMap provides a mock function for the type MockDBPort
func (_mock *MockDBPort) GetNotesMap(ctx context.Context, uid string, req *domain.NoteSearchRequest) ([]domain.Note, error) {
	ret := _mock.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for GetNotesMap")
	}

	var r0 []domain.Note
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.NoteSearchRequest) ([]domain.Note, error)); ok {
		return returnFunc(ctx, uid, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.NoteSearchRequest) []domain.Note); ok {
		r0 = returnFunc(ctx, uid, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Note)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.NoteSearchRequest) error); ok {
		r1 = returnFunc(ctx, uid, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_GetNotesMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotesMap'
type MockDBPort_GetNotesMap_Call struct {
	*mock.Call
}

// GetNotesMap is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req *domain.NoteSearchRequest
func (_e *MockDBPort_Expecter) GetNotesMap(ctx interface{}, uid interface{}, req interface{}) *MockDBPort_GetNotesMap_Call {
	return &MockDBPort_GetNotesMap_Call{Call: _e.mock.On("GetNotesMap", ctx, uid, req)}
}

func (_c *MockDBPort_GetNotesMap_Call) Run(run func(ctx context.Context, uid string, req *domain.NoteSearchRequest)) *MockDBPort_GetNotesMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.NoteSearchRequest
		if args[2] != nil {
			arg2 = args[2].(*domain.NoteSearchRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBPort_GetNotesMap_Call) Return(notes []domain.Note, err error) *MockDBPort_GetNotesMap_Call {
	_c.Call.Return(notes, err)
	return _c
}

func (_c *MockDBPort_GetNotesMap_Call) RunAndReturn(run func(ctx context.Context, uid string, req *domain.NoteSearchRequest) ([]domain.Note, error)) *MockDBPort_GetNotesMap_Call {
	_c.Call.Return(run)
	return _c
}

// GetSecret provides a mock function for the type MockDBPort
func (_mock *MockDBPort) GetSecret(ctx context.Context, uid string, id string) (*domain.Secret, error) {
	ret := _mock.Called(ctx, uid, id)

	if len(ret) == 0 {
		panic("no return value specified for GetSecret")
	}

	var r0 *domain.Secret
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*domain.Secret, error)); ok {
		return returnFunc(ctx, uid, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *domain.Secret); ok {
		r0 = returnFunc(ctx, uid, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Secret)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, uid, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_GetSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecret'
type MockDBPort_GetSecret_Call struct {
	*mock.Call
}

// GetSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - id string
func (_e *MockDBPort_Expecter) GetSecret(ctx interface{}, uid interface{}, id interface{}) *MockDBPort_GetSecret_Call {
	return &MockDBPort_GetSecret_Call{Call: _e.mock.On("GetSecret", ctx, uid, id)}
}

func (_c *MockDBPort_GetSecret_Call) Run(run func(ctx context.Context, uid string, id string)) *MockDBPort_GetSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBPort_GetSecret_Call) Return(secret *domain.Secret, err error) *MockDBPort_GetSecret_Call {
	_c.Call.Return(secret, err)
	return _c
}

func (_c *MockDBPort_GetSecret_Call) RunAndReturn(run func(ctx context.Context, uid string, id string) (*domain.Secret, error)) *MockDBPort_GetSecret_Call {
	_c.Call.Return(run)
	return _c
}

// GetSecretTags provides a mock function for the type MockDBPort
func (_mock *MockDBPort) GetSecretTags(ctx context.Context, uid string) ([]string, error) {
	ret := _mock.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for GetSecretTags")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return returnFunc(ctx, uid)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = returnFunc(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_GetSecretTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecretTags'
type MockDBPort_GetSecretTags_Call struct {
	*mock.Call
}

// GetSecretTags is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
func (_e *MockDBPort_Expecter) GetSecretTags(ctx interface{}, uid interface{}) *MockDBPort_GetSecretTags_Call {
	return &MockDBPort_GetSecretTags_Call{Call: _e.mock.On("GetSecretTags", ctx, uid)}
}

func (_c *MockDBPort_GetSecretTags_Call) Run(run func(ctx context.Context, uid string)) *MockDBPort_GetSecretTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDBPort_GetSecretTags_Call) Return(strings []string, err error) *MockDBPort_GetSecretTags_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockDBPort_GetSecretTags_Call) RunAndReturn(run func(ctx context.Context, uid string) ([]string, error)) *MockDBPort_GetSecretTags_Call {
	_c.Call.Return(run)
	return _c
}

// GetSecrets provides a mock function for the type MockDBPort
func (_mock *MockDBPort) GetSecrets(ctx context.Context, uid string, req *domain.SecretSearchRequest) ([]domain.Secret, error) {
	ret := _mock.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for GetSecrets")
	}

	var r0 []domain.Secret
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.SecretSearchRequest) ([]domain.Secret, error)); ok {
		return returnFunc(ctx, uid, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.SecretSearchRequest) []domain.Secret); ok {
		r0 = returnFunc(ctx, uid, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Secret)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.SecretSearchRequest) error); ok {
		r1 = returnFunc(ctx, uid, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_GetSecrets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecrets'
type MockDBPort_GetSecrets_Call struct {
	*mock.Call
}

// GetSecrets is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req *domain.SecretSearchRequest
func (_e *MockDBPort_Expecter) GetSecrets(ctx interface{}, uid interface{}, req interface{}) *MockDBPort_GetSecrets_Call {
	return &MockDBPort_GetSecrets_Call{Call: _e.mock.On("GetSecrets", ctx, uid, req)}
}

func (_c *MockDBPort_GetSecrets_Call) Run(run func(ctx context.Context, uid string, req *domain.SecretSearchRequest)) *MockDBPort_GetSecrets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.SecretSearchRequest
		if args[2] != nil {
			arg2 = args[2].(*domain.SecretSearchRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBPort_GetSecrets_Call) Return(secrets []domain.Secret, err error) *MockDBPort_GetSecrets_Call {
	_c.Call.Return(secrets, err)
	return _c
}

func (_c *MockDBPort_GetSecrets_Call) RunAndReturn(run func(ctx context.Context, uid string, req *domain.SecretSearchRequest) ([]domain.Secret, error)) *MockDBPort_GetSecrets_Call {
	_c.Call.Return(run)
	return _c
}

// GetSecretsCount provides a mock function for the type MockDBPort
func (_mock *MockDBPort) GetSecretsCount(ctx context.Context, uid string, req *domain.SecretSearchRequest) (int64, error) {
	ret := _mock.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for GetSecretsCount")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.SecretSearchRequest) (int64, error)); ok {
		return returnFunc(ctx, uid, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.SecretSearchRequest) int64); ok {
		r0 = returnFunc(ctx, uid, req)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.SecretSearchRequest) error); ok {
		r1 = returnFunc(ctx, uid, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_GetSecretsCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecretsCount'
type MockDBPort_GetSecretsCount_Call struct {
	*mock.Call
}

// GetSecretsCount is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req *domain.SecretSearchRequest
func (_e *MockDBPort_Expecter) GetSecretsCount(ctx interface{}, uid interface{}, req interface{}) *MockDBPort_GetSecretsCount_Call {
	return &MockDBPort_GetSecretsCount_Call{Call: _e.mock.On("GetSecretsCount", ctx, uid, req)}
}

func (_c *MockDBPort_GetSecretsCount_Call) Run(run func(ctx context.Context, uid string, req *domain.SecretSearchRequest)) *MockDBPort_GetSecretsCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.SecretSearchRequest
		if args[2] != nil {
			arg2 = args[2].(*domain.SecretSearchRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBPort_GetSecretsCount_Call) Return(n int64, err error) *MockDBPort_GetSecretsCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockDBPort_GetSecretsCount_Call) RunAndReturn(run func(ctx context.Context, uid string, req *domain.SecretSearchRequest) (int64, error)) *MockDBPort_GetSecretsCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetSecretsMap provides a mock function for the type MockDBPort
func (_mock *MockDBPort) GetSecretsMap(ctx context.Context, uid string, req *domain.SecretSearchRequest) ([]domain.SecretExportItem, error) {
	ret := _mock.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for GetSecretsMap")
	}

	var r0 []domain.SecretExportItem
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.SecretSearchRequest) ([]domain.SecretExportItem, error)); ok {
		return returnFunc(ctx, uid, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.SecretSearchRequest) []domain.SecretExportItem); ok {
		r0 = returnFunc(ctx, uid, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.SecretExportItem)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.SecretSearchRequest) error); ok {
		r1 = returnFunc(ctx, uid, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_GetSecretsMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecretsMap'
type MockDBPort_GetSecretsMap_Call struct {
	*mock.Call
}

// GetSecretsMap is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req *domain.SecretSearchRequest
func (_e *MockDBPort_Expecter) GetSecretsMap(ctx interface{}, uid interface{}, req interface{}) *MockDBPort_GetSecretsMap_Call {
	return &MockDBPort_GetSecretsMap_Call{Call: _e.mock.On("GetSecretsMap", ctx, uid, req)}
}

func (_c *MockDBPort_GetSecretsMap_Call) Run(run func(ctx context.Context, uid string, req *domain.SecretSearchRequest)) *MockDBPort_GetSecretsMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.SecretSearchRequest
		if args[2] != nil {
			arg2 = args[2].(*domain.SecretSearchRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBPort_GetSecretsMap_Call) Return(secretExportItems []domain.SecretExportItem, err error) *MockDBPort_GetSecretsMap_Call {
	_c.Call.Return(secretExportItems, err)
	return _c
}

func (_c *MockDBPort_GetSecretsMap_Call) RunAndReturn(run func(ctx context.Context, uid string, req *domain.SecretSearchRequest) ([]domain.SecretExportItem, error)) *MockDBPort_GetSecretsMap_Call {
	_c.Call.Return(run)
	return _c
}

// GetSystemStats provides a mock function for the type MockDBPort
func (_mock *MockDBPort) GetSystemStats(context1 context.Context, s string) (*domain.SystemStats, error) {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for GetSystemStats")
	}

	var r0 *domain.SystemStats
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.SystemStats, error)); ok {
		return returnFunc(context1, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.SystemStats); ok {
		r0 = returnFunc(context1, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.SystemStats)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(context1, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_GetSystemStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSystemStats'
type MockDBPort_GetSystemStats_Call struct {
	*mock.Call
}

// GetSystemStats is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
func (_e *MockDBPort_Expecter) GetSystemStats(context1 interface{}, s interface{}) *MockDBPort_GetSystemStats_Call {
	return &MockDBPort_GetSystemStats_Call{Call: _e.mock.On("GetSystemStats", context1, s)}
}

func (_c *MockDBPort_GetSystemStats_Call) Run(run func(context1 context.Context, s string)) *MockDBPort_GetSystemStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDBPort_GetSystemStats_Call) Return(systemStats *domain.SystemStats, err error) *MockDBPort_GetSystemStats_Call {
	_c.Call.Return(systemStats, err)
	return _c
}

func (_c *MockDBPort_GetSystemStats_Call) RunAndReturn(run func(context1 context.Context, s string) (*domain.SystemStats, error)) *MockDBPort_GetSystemStats_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockDBPort
func (_mock *MockDBPort) GetUser(ctx context.Context, id string) (*domain.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockDBPort_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockDBPort_Expecter) GetUser(ctx interface{}, id interface{}) *MockDBPort_GetUser_Call {
	return &MockDBPort_GetUser_Call{Call: _e.mock.On("GetUser", ctx, id)}
}

func (_c *MockDBPort_GetUser_Call) Run(run func(ctx context.Context, id string)) *MockDBPort_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDBPort_GetUser_Call) Return(user *domain.User, err error) *MockDBPort_GetUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockDBPort_GetUser_Call) RunAndReturn(run func(ctx context.Context, id string) (*domain.User, error)) *MockDBPort_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserAuthKey provides a mock function for the type MockDBPort
func (_mock *MockDBPort) GetUserAuthKey(ctx context.Context, id string) ([]byte, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAuthKey")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_GetUserAuthKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserAuthKey'
type MockDBPort_GetUserAuthKey_Call struct {
	*mock.Call
}

// GetUserAuthKey is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockDBPort_Expecter) GetUserAuthKey(ctx interface{}, id interface{}) *MockDBPort_GetUserAuthKey_Call {
	return &MockDBPort_GetUserAuthKey_Call{Call: _e.mock.On("GetUserAuthKey", ctx, id)}
}

func (_c *MockDBPort_GetUserAuthKey_Call) Run(run func(ctx context.Context, id string)) *MockDBPort_GetUserAuthKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDBPort_GetUserAuthKey_Call) Return(bytes []byte, err error) *MockDBPort_GetUserAuthKey_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockDBPort_GetUserAuthKey_Call) RunAndReturn(run func(ctx context.Context, id string) ([]byte, error)) *MockDBPort_GetUserAuthKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsername provides a mock function for the type MockDBPort
func (_mock *MockDBPort) GetUserByUsername(ctx context.Context, username string) (*domain.User, error) {
	ret := _mock.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return returnFunc(ctx, username)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = returnFunc(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, username)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type MockDBPort_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockDBPort_Expecter) GetUserByUsername(ctx interface{}, username interface{}) *MockDBPort_GetUserByUsername_Call {
	return &MockDBPort_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", ctx, username)}
}

func (_c *MockDBPort_GetUserByUsername_Call) Run(run func(ctx context.Context, username string)) *MockDBPort_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDBPort_GetUserByUsername_Call) Return(user *domain.User, err error) *MockDBPort_GetUserByUsername_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockDBPort_GetUserByUsername_Call) RunAndReturn(run func(ctx context.Context, username string) (*domain.User, error)) *MockDBPort_GetUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserSettings provides a mock function for the type MockDBPort
func (_mock *MockDBPort) GetUserSettings(ctx context.Context, id string) (*domain.UserSettings, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSettings")
	}

	var r0 *domain.UserSettings
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.UserSettings, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.UserSettings); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserSettings)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_GetUserSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserSettings'
type MockDBPort_GetUserSettings_Call struct {
	*mock.Call
}

// GetUserSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockDBPort_Expecter) GetUserSettings(ctx interface{}, id interface{}) *MockDBPort_GetUserSettings_Call {
	return &MockDBPort_GetUserSettings_Call{Call: _e.mock.On("GetUserSettings", ctx, id)}
}

func (_c *MockDBPort_GetUserSettings_Call) Run(run func(ctx context.Context, id string)) *MockDBPort_GetUserSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDBPort_GetUserSettings_Call) Return(userSettings *domain.UserSettings, err error) *MockDBPort_GetUserSettings_Call {
	_c.Call.Return(userSettings, err)
	return _c
}

func (_c *MockDBPort_GetUserSettings_Call) RunAndReturn(run func(ctx context.Context, id string) (*domain.UserSettings, error)) *MockDBPort_GetUserSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function for the type MockDBPort
func (_mock *MockDBPort) GetUsers(ctx context.Context, req *domain.UserRequest) ([]domain.User, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.UserRequest) ([]domain.User, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.UserRequest) []domain.User); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.UserRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type MockDBPort_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - req *domain.UserRequest
func (_e *MockDBPort_Expecter) GetUsers(ctx interface{}, req interface{}) *MockDBPort_GetUsers_Call {
	return &MockDBPort_GetUsers_Call{Call: _e.mock.On("GetUsers", ctx, req)}
}

func (_c *MockDBPort_GetUsers_Call) Run(run func(ctx context.Context, req *domain.UserRequest)) *MockDBPort_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.UserRequest
		if args[1] != nil {
			arg1 = args[1].(*domain.UserRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDBPort_GetUsers_Call) Return(users []domain.User, err error) *MockDBPort_GetUsers_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockDBPort_GetUsers_Call) RunAndReturn(run func(ctx context.Context, req *domain.UserRequest) ([]domain.User, error)) *MockDBPort_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersCount provides a mock function for the type MockDBPort
func (_mock *MockDBPort) GetUsersCount(ctx context.Context, req *domain.UserRequest) (int64, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersCount")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.UserRequest) (int64, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.UserRequest) int64); ok {
		r0 = returnFunc(ctx, req)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.UserRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_GetUsersCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersCount'
type MockDBPort_GetUsersCount_Call struct {
	*mock.Call
}

// GetUsersCount is a helper method to define mock.On call
//   - ctx context.Context
//   - req *domain.UserRequest
func (_e *MockDBPort_Expecter) GetUsersCount(ctx interface{}, req interface{}) *MockDBPort_GetUsersCount_Call {
	return &MockDBPort_GetUsersCount_Call{Call: _e.mock.On("GetUsersCount", ctx, req)}
}

func (_c *MockDBPort_GetUsersCount_Call) Run(run func(ctx context.Context, req *domain.UserRequest)) *MockDBPort_GetUsersCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.UserRequest
		if args[1] != nil {
			arg1 = args[1].(*domain.UserRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDBPort_GetUsersCount_Call) Return(n int64, err error) *MockDBPort_GetUsersCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockDBPort_GetUsersCount_Call) RunAndReturn(run func(ctx context.Context, req *domain.UserRequest) (int64, error)) *MockDBPort_GetUsersCount_Call {
	_c.Call.Return(run)
	return _c
}

// SearchBookmarksByTerm provides a mock function for the type MockDBPort
func (_mock *MockDBPort) SearchBookmarksByTerm(ctx context.Context, uid string, req *domain.BookmarkSearchRequest) ([]domain.Bookmark, error) {
	ret := _mock.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for SearchBookmarksByTerm")
	}

	var r0 []domain.Bookmark
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.BookmarkSearchRequest) ([]domain.Bookmark, error)); ok {
		return returnFunc(ctx, uid, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.BookmarkSearchRequest) []domain.Bookmark); ok {
		r0 = returnFunc(ctx, uid, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Bookmark)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.BookmarkSearchRequest) error); ok {
		r1 = returnFunc(ctx, uid, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_SearchBookmarksByTerm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchBookmarksByTerm'
type MockDBPort_SearchBookmarksByTerm_Call struct {
	*mock.Call
}

// SearchBookmarksByTerm is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req *domain.BookmarkSearchRequest
func (_e *MockDBPort_Expecter) SearchBookmarksByTerm(ctx interface{}, uid interface{}, req interface{}) *MockDBPort_SearchBookmarksByTerm_Call {
	return &MockDBPort_SearchBookmarksByTerm_Call{Call: _e.mock.On("SearchBookmarksByTerm", ctx, uid, req)}
}

func (_c *MockDBPort_SearchBookmarksByTerm_Call) Run(run func(ctx context.Context, uid string, req *domain.BookmarkSearchRequest)) *MockDBPort_SearchBookmarksByTerm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.BookmarkSearchRequest
		if args[2] != nil {
			arg2 = args[2].(*domain.BookmarkSearchRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBPort_SearchBookmarksByTerm_Call) Return(bookmarks []domain.Bookmark, err error) *MockDBPort_SearchBookmarksByTerm_Call {
	_c.Call.Return(bookmarks, err)
	return _c
}

func (_c *MockDBPort_SearchBookmarksByTerm_Call) RunAndReturn(run func(ctx context.Context, uid string, req *domain.BookmarkSearchRequest) ([]domain.Bookmark, error)) *MockDBPort_SearchBookmarksByTerm_Call {
	_c.Call.Return(run)
	return _c
}

// SearchNotesByTerm provides a mock function for the type MockDBPort
func (_mock *MockDBPort) SearchNotesByTerm(ctx context.Context, uid string, req *domain.NoteRequest) ([]domain.Note, error) {
	ret := _mock.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for SearchNotesByTerm")
	}

	var r0 []domain.Note
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.NoteRequest) ([]domain.Note, error)); ok {
		return returnFunc(ctx, uid, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.NoteRequest) []domain.Note); ok {
		r0 = returnFunc(ctx, uid, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Note)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.NoteRequest) error); ok {
		r1 = returnFunc(ctx, uid, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_SearchNotesByTerm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchNotesByTerm'
type MockDBPort_SearchNotesByTerm_Call struct {
	*mock.Call
}

// SearchNotesByTerm is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req *domain.NoteRequest
func (_e *MockDBPort_Expecter) SearchNotesByTerm(ctx interface{}, uid interface{}, req interface{}) *MockDBPort_SearchNotesByTerm_Call {
	return &MockDBPort_SearchNotesByTerm_Call{Call: _e.mock.On("SearchNotesByTerm", ctx, uid, req)}
}

func (_c *MockDBPort_SearchNotesByTerm_Call) Run(run func(ctx context.Context, uid string, req *domain.NoteRequest)) *MockDBPort_SearchNotesByTerm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.NoteRequest
		if args[2] != nil {
			arg2 = args[2].(*domain.NoteRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBPort_SearchNotesByTerm_Call) Return(notes []domain.Note, err error) *MockDBPort_SearchNotesByTerm_Call {
	_c.Call.Return(notes, err)
	return _c
}

func (_c *MockDBPort_SearchNotesByTerm_Call) RunAndReturn(run func(ctx context.Context, uid string, req *domain.NoteRequest) ([]domain.Note, error)) *MockDBPort_SearchNotesByTerm_Call {
	_c.Call.Return(run)
	return _c
}

// SearchSecretsByTerm provides a mock function for the type MockDBPort
func (_mock *MockDBPort) SearchSecretsByTerm(ctx context.Context, uid string, req *domain.SecretRequest) ([]domain.Secret, error) {
	ret := _mock.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for SearchSecretsByTerm")
	}

	var r0 []domain.Secret
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.SecretRequest) ([]domain.Secret, error)); ok {
		return returnFunc(ctx, uid, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.SecretRequest) []domain.Secret); ok {
		r0 = returnFunc(ctx, uid, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Secret)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.SecretRequest) error); ok {
		r1 = returnFunc(ctx, uid, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_SearchSecretsByTerm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchSecretsByTerm'
type MockDBPort_SearchSecretsByTerm_Call struct {
	*mock.Call
}

// SearchSecretsByTerm is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req *domain.SecretRequest
func (_e *MockDBPort_Expecter) SearchSecretsByTerm(ctx interface{}, uid interface{}, req interface{}) *MockDBPort_SearchSecretsByTerm_Call {
	return &MockDBPort_SearchSecretsByTerm_Call{Call: _e.mock.On("SearchSecretsByTerm", ctx, uid, req)}
}

func (_c *MockDBPort_SearchSecretsByTerm_Call) Run(run func(ctx context.Context, uid string, req *domain.SecretRequest)) *MockDBPort_SearchSecretsByTerm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.SecretRequest
		if args[2] != nil {
			arg2 = args[2].(*domain.SecretRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBPort_SearchSecretsByTerm_Call) Return(secrets []domain.Secret, err error) *MockDBPort_SearchSecretsByTerm_Call {
	_c.Call.Return(secrets, err)
	return _c
}

func (_c *MockDBPort_SearchSecretsByTerm_Call) RunAndReturn(run func(ctx context.Context, uid string, req *domain.SecretRequest) ([]domain.Secret, error)) *MockDBPort_SearchSecretsByTerm_Call {
	_c.Call.Return(run)
	return _c
}

// SetLastOpened provides a mock function for the type MockDBPort
func (_mock *MockDBPort) SetLastOpened(ctx context.Context, itemType domain.LastOpenedType, uid string, itemID string) error {
	ret := _mock.Called(ctx, itemType, uid, itemID)

	if len(ret) == 0 {
		panic("no return value specified for SetLastOpened")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.LastOpenedType, string, string) error); ok {
		r0 = returnFunc(ctx, itemType, uid, itemID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBPort_SetLastOpened_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLastOpened'
type MockDBPort_SetLastOpened_Call struct {
	*mock.Call
}

// SetLastOpened is a helper method to define mock.On call
//   - ctx context.Context
//   - itemType domain.LastOpenedType
//   - uid string
//   - itemID string
func (_e *MockDBPort_Expecter) SetLastOpened(ctx interface{}, itemType interface{}, uid interface{}, itemID interface{}) *MockDBPort_SetLastOpened_Call {
	return &MockDBPort_SetLastOpened_Call{Call: _e.mock.On("SetLastOpened", ctx, itemType, uid, itemID)}
}

func (_c *MockDBPort_SetLastOpened_Call) Run(run func(ctx context.Context, itemType domain.LastOpenedType, uid string, itemID string)) *MockDBPort_SetLastOpened_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.LastOpenedType
		if args[1] != nil {
			arg1 = args[1].(domain.LastOpenedType)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockDBPort_SetLastOpened_Call) Return(err error) *MockDBPort_SetLastOpened_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBPort_SetLastOpened_Call) RunAndReturn(run func(ctx context.Context, itemType domain.LastOpenedType, uid string, itemID string) error) *MockDBPort_SetLastOpened_Call {
	_c.Call.Return(run)
	return _c
}

// SetUserVerified provides a mock function for the type MockDBPort
func (_mock *MockDBPort) SetUserVerified(ctx context.Context, token string) (*domain.User, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for SetUserVerified")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = returnFunc(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_SetUserVerified_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUserVerified'
type MockDBPort_SetUserVerified_Call struct {
	*mock.Call
}

// SetUserVerified is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockDBPort_Expecter) SetUserVerified(ctx interface{}, token interface{}) *MockDBPort_SetUserVerified_Call {
	return &MockDBPort_SetUserVerified_Call{Call: _e.mock.On("SetUserVerified", ctx, token)}
}

func (_c *MockDBPort_SetUserVerified_Call) Run(run func(ctx context.Context, token string)) *MockDBPort_SetUserVerified_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDBPort_SetUserVerified_Call) Return(user *domain.User, err error) *MockDBPort_SetUserVerified_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockDBPort_SetUserVerified_Call) RunAndReturn(run func(ctx context.Context, token string) (*domain.User, error)) *MockDBPort_SetUserVerified_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBookmark provides a mock function for the type MockDBPort
func (_mock *MockDBPort) UpdateBookmark(ctx context.Context, uid string, id string, req *domain.Bookmark) (int64, error) {
	ret := _mock.Called(ctx, uid, id, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBookmark")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, *domain.Bookmark) (int64, error)); ok {
		return returnFunc(ctx, uid, id, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, *domain.Bookmark) int64); ok {
		r0 = returnFunc(ctx, uid, id, req)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, *domain.Bookmark) error); ok {
		r1 = returnFunc(ctx, uid, id, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_UpdateBookmark_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBookmark'
type MockDBPort_UpdateBookmark_Call struct {
	*mock.Call
}

// UpdateBookmark is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - id string
//   - req *domain.Bookmark
func (_e *MockDBPort_Expecter) UpdateBookmark(ctx interface{}, uid interface{}, id interface{}, req interface{}) *MockDBPort_UpdateBookmark_Call {
	return &MockDBPort_UpdateBookmark_Call{Call: _e.mock.On("UpdateBookmark", ctx, uid, id, req)}
}

func (_c *MockDBPort_UpdateBookmark_Call) Run(run func(ctx context.Context, uid string, id string, req *domain.Bookmark)) *MockDBPort_UpdateBookmark_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 *domain.Bookmark
		if args[3] != nil {
			arg3 = args[3].(*domain.Bookmark)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockDBPort_UpdateBookmark_Call) Return(n int64, err error) *MockDBPort_UpdateBookmark_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockDBPort_UpdateBookmark_Call) RunAndReturn(run func(ctx context.Context, uid string, id string, req *domain.Bookmark) (int64, error)) *MockDBPort_UpdateBookmark_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEncryptedSecrets provides a mock function for the type MockDBPort
func (_mock *MockDBPort) UpdateEncryptedSecrets(ctx context.Context, uid string, items map[string]domain.EncryptSecret) error {
	ret := _mock.Called(ctx, uid, items)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEncryptedSecrets")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, map[string]domain.EncryptSecret) error); ok {
		r0 = returnFunc(ctx, uid, items)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBPort_UpdateEncryptedSecrets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEncryptedSecrets'
type MockDBPort_UpdateEncryptedSecrets_Call struct {
	*mock.Call
}

// UpdateEncryptedSecrets is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - items map[string]domain.EncryptSecret
func (_e *MockDBPort_Expecter) UpdateEncryptedSecrets(ctx interface{}, uid interface{}, items interface{}) *MockDBPort_UpdateEncryptedSecrets_Call {
	return &MockDBPort_UpdateEncryptedSecrets_Call{Call: _e.mock.On("UpdateEncryptedSecrets", ctx, uid, items)}
}

func (_c *MockDBPort_UpdateEncryptedSecrets_Call) Run(run func(ctx context.Context, uid string, items map[string]domain.EncryptSecret)) *MockDBPort_UpdateEncryptedSecrets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 map[string]domain.EncryptSecret
		if args[2] != nil {
			arg2 = args[2].(map[string]domain.EncryptSecret)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBPort_UpdateEncryptedSecrets_Call) Return(err error) *MockDBPort_UpdateEncryptedSecrets_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBPort_UpdateEncryptedSecrets_Call) RunAndReturn(run func(ctx context.Context, uid string, items map[string]domain.EncryptSecret) error) *MockDBPort_UpdateEncryptedSecrets_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNote provides a mock function for the type MockDBPort
func (_mock *MockDBPort) UpdateNote(ctx context.Context, uid string, id string, req *domain.Note) (int64, error) {
	ret := _mock.Called(ctx, uid, id, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNote")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, *domain.Note) (int64, error)); ok {
		return returnFunc(ctx, uid, id, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, *domain.Note) int64); ok {
		r0 = returnFunc(ctx, uid, id, req)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, *domain.Note) error); ok {
		r1 = returnFunc(ctx, uid, id, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_UpdateNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNote'
type MockDBPort_UpdateNote_Call struct {
	*mock.Call
}

// UpdateNote is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - id string
//   - req *domain.Note
func (_e *MockDBPort_Expecter) UpdateNote(ctx interface{}, uid interface{}, id interface{}, req interface{}) *MockDBPort_UpdateNote_Call {
	return &MockDBPort_UpdateNote_Call{Call: _e.mock.On("UpdateNote", ctx, uid, id, req)}
}

func (_c *MockDBPort_UpdateNote_Call) Run(run func(ctx context.Context, uid string, id string, req *domain.Note)) *MockDBPort_UpdateNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 *domain.Note
		if args[3] != nil {
			arg3 = args[3].(*domain.Note)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockDBPort_UpdateNote_Call) Return(n int64, err error) *MockDBPort_UpdateNote_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockDBPort_UpdateNote_Call) RunAndReturn(run func(ctx context.Context, uid string, id string, req *domain.Note) (int64, error)) *MockDBPort_UpdateNote_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSecret provides a mock function for the type MockDBPort
func (_mock *MockDBPort) UpdateSecret(ctx context.Context, uid string, id string, req *domain.Secret) (int64, error) {
	ret := _mock.Called(ctx, uid, id, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSecret")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, *domain.Secret) (int64, error)); ok {
		return returnFunc(ctx, uid, id, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, *domain.Secret) int64); ok {
		r0 = returnFunc(ctx, uid, id, req)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, *domain.Secret) error); ok {
		r1 = returnFunc(ctx, uid, id, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_UpdateSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSecret'
type MockDBPort_UpdateSecret_Call struct {
	*mock.Call
}

// UpdateSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - id string
//   - req *domain.Secret
func (_e *MockDBPort_Expecter) UpdateSecret(ctx interface{}, uid interface{}, id interface{}, req interface{}) *MockDBPort_UpdateSecret_Call {
	return &MockDBPort_UpdateSecret_Call{Call: _e.mock.On("UpdateSecret", ctx, uid, id, req)}
}

func (_c *MockDBPort_UpdateSecret_Call) Run(run func(ctx context.Context, uid string, id string, req *domain.Secret)) *MockDBPort_UpdateSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 *domain.Secret
		if args[3] != nil {
			arg3 = args[3].(*domain.Secret)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockDBPort_UpdateSecret_Call) Return(n int64, err error) *MockDBPort_UpdateSecret_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockDBPort_UpdateSecret_Call) RunAndReturn(run func(ctx context.Context, uid string, id string, req *domain.Secret) (int64, error)) *MockDBPort_UpdateSecret_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function for the type MockDBPort
func (_mock *MockDBPort) UpdateUser(ctx context.Context, id string, req *domain.UserUpdate) (int64, error) {
	ret := _mock.Called(ctx, id, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.UserUpdate) (int64, error)); ok {
		return returnFunc(ctx, id, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.UserUpdate) int64); ok {
		r0 = returnFunc(ctx, id, req)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.UserUpdate) error); ok {
		r1 = returnFunc(ctx, id, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBPort_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockDBPort_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - req *domain.UserUpdate
func (_e *MockDBPort_Expecter) UpdateUser(ctx interface{}, id interface{}, req interface{}) *MockDBPort_UpdateUser_Call {
	return &MockDBPort_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, id, req)}
}

func (_c *MockDBPort_UpdateUser_Call) Run(run func(ctx context.Context, id string, req *domain.UserUpdate)) *MockDBPort_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.UserUpdate
		if args[2] != nil {
			arg2 = args[2].(*domain.UserUpdate)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBPort_UpdateUser_Call) Return(n int64, err error) *MockDBPort_UpdateUser_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockDBPort_UpdateUser_Call) RunAndReturn(run func(ctx context.Context, id string, req *domain.UserUpdate) (int64, error)) *MockDBPort_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserAuthKey provides a mock function for the type MockDBPort
func (_mock *MockDBPort) UpdateUserAuthKey(ctx context.Context, uid string, newEncKey []byte) error {
	ret := _mock.Called(ctx, uid, newEncKey)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserAuthKey")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []byte) error); ok {
		r0 = returnFunc(ctx, uid, newEncKey)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBPort_UpdateUserAuthKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserAuthKey'
type MockDBPort_UpdateUserAuthKey_Call struct {
	*mock.Call
}

// UpdateUserAuthKey is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - newEncKey []byte
func (_e *MockDBPort_Expecter) UpdateUserAuthKey(ctx interface{}, uid interface{}, newEncKey interface{}) *MockDBPort_UpdateUserAuthKey_Call {
	return &MockDBPort_UpdateUserAuthKey_Call{Call: _e.mock.On("UpdateUserAuthKey", ctx, uid, newEncKey)}
}

func (_c *MockDBPort_UpdateUserAuthKey_Call) Run(run func(ctx context.Context, uid string, newEncKey []byte)) *MockDBPort_UpdateUserAuthKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []byte
		if args[2] != nil {
			arg2 = args[2].([]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBPort_UpdateUserAuthKey_Call) Return(err error) *MockDBPort_UpdateUserAuthKey_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBPort_UpdateUserAuthKey_Call) RunAndReturn(run func(ctx context.Context, uid string, newEncKey []byte) error) *MockDBPort_UpdateUserAuthKey_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserSettings provides a mock function for the type MockDBPort
func (_mock *MockDBPort) UpdateUserSettings(ctx context.Context, id string, settings *domain.UserSettings) error {
	ret := _mock.Called(ctx, id, settings)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserSettings")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.UserSettings) error); ok {
		r0 = returnFunc(ctx, id, settings)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDBPort_UpdateUserSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserSettings'
type MockDBPort_UpdateUserSettings_Call struct {
	*mock.Call
}

// UpdateUserSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - settings *domain.UserSettings
func (_e *MockDBPort_Expecter) UpdateUserSettings(ctx interface{}, id interface{}, settings interface{}) *MockDBPort_UpdateUserSettings_Call {
	return &MockDBPort_UpdateUserSettings_Call{Call: _e.mock.On("UpdateUserSettings", ctx, id, settings)}
}

func (_c *MockDBPort_UpdateUserSettings_Call) Run(run func(ctx context.Context, id string, settings *domain.UserSettings)) *MockDBPort_UpdateUserSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.UserSettings
		if args[2] != nil {
			arg2 = args[2].(*domain.UserSettings)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDBPort_UpdateUserSettings_Call) Return(err error) *MockDBPort_UpdateUserSettings_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDBPort_UpdateUserSettings_Call) RunAndReturn(run func(ctx context.Context, id string, settings *domain.UserSettings) error) *MockDBPort_UpdateUserSettings_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFileSystem creates a new instance of MockFileSystem. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileSystem(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileSystem {
	mock := &MockFileSystem{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFileSystem is an autogenerated mock type for the FileSystem type
type MockFileSystem struct {
	mock.Mock
}

type MockFileSystem_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileSystem) EXPECT() *MockFileSystem_Expecter {
	return &MockFileSystem_Expecter{mock: &_m.Mock}
}

// CleanPath provides a mock function for the type MockFileSystem
func (_mock *MockFileSystem) CleanPath(path string) string {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for CleanPath")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockFileSystem_CleanPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanPath'
type MockFileSystem_CleanPath_Call struct {
	*mock.Call
}

// CleanPath is a helper method to define mock.On call
//   - path string
func (_e *MockFileSystem_Expecter) CleanPath(path interface{}) *MockFileSystem_CleanPath_Call {
	return &MockFileSystem_CleanPath_Call{Call: _e.mock.On("CleanPath", path)}
}

func (_c *MockFileSystem_CleanPath_Call) Run(run func(path string)) *MockFileSystem_CleanPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFileSystem_CleanPath_Call) Return(s string) *MockFileSystem_CleanPath_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockFileSystem_CleanPath_Call) RunAndReturn(run func(path string) string) *MockFileSystem_CleanPath_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFolder provides a mock function for the type MockFileSystem
func (_mock *MockFileSystem) CreateFolder(ctx context.Context, uid string, path string) error {
	ret := _mock.Called(ctx, uid, path)

	if len(ret) == 0 {
		panic("no return value specified for CreateFolder")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, uid, path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileSystem_CreateFolder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFolder'
type MockFileSystem_CreateFolder_Call struct {
	*mock.Call
}

// CreateFolder is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - path string
func (_e *MockFileSystem_Expecter) CreateFolder(ctx interface{}, uid interface{}, path interface{}) *MockFileSystem_CreateFolder_Call {
	return &MockFileSystem_CreateFolder_Call{Call: _e.mock.On("CreateFolder", ctx, uid, path)}
}

func (_c *MockFileSystem_CreateFolder_Call) Run(run func(ctx context.Context, uid string, path string)) *MockFileSystem_CreateFolder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFileSystem_CreateFolder_Call) Return(err error) *MockFileSystem_CreateFolder_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileSystem_CreateFolder_Call) RunAndReturn(run func(ctx context.Context, uid string, path string) error) *MockFileSystem_CreateFolder_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUserDataDirectory provides a mock function for the type MockFileSystem
func (_mock *MockFileSystem) CreateUserDataDirectory(ctx context.Context, uid string) error {
	ret := _mock.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserDataDirectory")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, uid)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileSystem_CreateUserDataDirectory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserDataDirectory'
type MockFileSystem_CreateUserDataDirectory_Call struct {
	*mock.Call
}

// CreateUserDataDirectory is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
func (_e *MockFileSystem_Expecter) CreateUserDataDirectory(ctx interface{}, uid interface{}) *MockFileSystem_CreateUserDataDirectory_Call {
	return &MockFileSystem_CreateUserDataDirectory_Call{Call: _e.mock.On("CreateUserDataDirectory", ctx, uid)}
}

func (_c *MockFileSystem_CreateUserDataDirectory_Call) Run(run func(ctx context.Context, uid string)) *MockFileSystem_CreateUserDataDirectory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFileSystem_CreateUserDataDirectory_Call) Return(err error) *MockFileSystem_CreateUserDataDirectory_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileSystem_CreateUserDataDirectory_Call) RunAndReturn(run func(ctx context.Context, uid string) error) *MockFileSystem_CreateUserDataDirectory_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFile provides a mock function for the type MockFileSystem
func (_mock *MockFileSystem) DeleteFile(ctx context.Context, uid string, path string) error {
	ret := _mock.Called(ctx, uid, path)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, uid, path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileSystem_DeleteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFile'
type MockFileSystem_DeleteFile_Call struct {
	*mock.Call
}

// DeleteFile is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - path string
func (_e *MockFileSystem_Expecter) DeleteFile(ctx interface{}, uid interface{}, path interface{}) *MockFileSystem_DeleteFile_Call {
	return &MockFileSystem_DeleteFile_Call{Call: _e.mock.On("DeleteFile", ctx, uid, path)}
}

func (_c *MockFileSystem_DeleteFile_Call) Run(run func(ctx context.Context, uid string, path string)) *MockFileSystem_DeleteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFileSystem_DeleteFile_Call) Return(err error) *MockFileSystem_DeleteFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileSystem_DeleteFile_Call) RunAndReturn(run func(ctx context.Context, uid string, path string) error) *MockFileSystem_DeleteFile_Call {
	_c.Call.Return(run)
	return _c
}

// FileExists provides a mock function for the type MockFileSystem
func (_mock *MockFileSystem) FileExists(ctx context.Context, uid string, path string) (bool, error) {
	ret := _mock.Called(ctx, uid, path)

	if len(ret) == 0 {
		panic("no return value specified for FileExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return returnFunc(ctx, uid, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = returnFunc(ctx, uid, path)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, uid, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileSystem_FileExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FileExists'
type MockFileSystem_FileExists_Call struct {
	*mock.Call
}

// FileExists is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - path string
func (_e *MockFileSystem_Expecter) FileExists(ctx interface{}, uid interface{}, path interface{}) *MockFileSystem_FileExists_Call {
	return &MockFileSystem_FileExists_Call{Call: _e.mock.On("FileExists", ctx, uid, path)}
}

func (_c *MockFileSystem_FileExists_Call) Run(run func(ctx context.Context, uid string, path string)) *MockFileSystem_FileExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFileSystem_FileExists_Call) Return(b bool, err error) *MockFileSystem_FileExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockFileSystem_FileExists_Call) RunAndReturn(run func(ctx context.Context, uid string, path string) (bool, error)) *MockFileSystem_FileExists_Call {
	_c.Call.Return(run)
	return _c
}

// FileInternalName provides a mock function for the type MockFileSystem
func (_mock *MockFileSystem) FileInternalName(ctx context.Context, uid string, path string) (string, error) {
	ret := _mock.Called(ctx, uid, path)

	if len(ret) == 0 {
		panic("no return value specified for FileInternalName")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return returnFunc(ctx, uid, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = returnFunc(ctx, uid, path)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, uid, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileSystem_FileInternalName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FileInternalName'
type MockFileSystem_FileInternalName_Call struct {
	*mock.Call
}

// FileInternalName is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - path string
func (_e *MockFileSystem_Expecter) FileInternalName(ctx interface{}, uid interface{}, path interface{}) *MockFileSystem_FileInternalName_Call {
	return &MockFileSystem_FileInternalName_Call{Call: _e.mock.On("FileInternalName", ctx, uid, path)}
}

func (_c *MockFileSystem_FileInternalName_Call) Run(run func(ctx context.Context, uid string, path string)) *MockFileSystem_FileInternalName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFileSystem_FileInternalName_Call) Return(s string, err error) *MockFileSystem_FileInternalName_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockFileSystem_FileInternalName_Call) RunAndReturn(run func(ctx context.Context, uid string, path string) (string, error)) *MockFileSystem_FileInternalName_Call {
	_c.Call.Return(run)
	return _c
}

// GetDiskUsage provides a mock function for the type MockFileSystem
func (_mock *MockFileSystem) GetDiskUsage(ctx context.Context, uid string) (int64, error) {
	ret := _mock.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for GetDiskUsage")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return returnFunc(ctx, uid)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = returnFunc(ctx, uid)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileSystem_GetDiskUsage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDiskUsage'
type MockFileSystem_GetDiskUsage_Call struct {
	*mock.Call
}

// GetDiskUsage is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
func (_e *MockFileSystem_Expecter) GetDiskUsage(ctx interface{}, uid interface{}) *MockFileSystem_GetDiskUsage_Call {
	return &MockFileSystem_GetDiskUsage_Call{Call: _e.mock.On("GetDiskUsage", ctx, uid)}
}

func (_c *MockFileSystem_GetDiskUsage_Call) Run(run func(ctx context.Context, uid string)) *MockFileSystem_GetDiskUsage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFileSystem_GetDiskUsage_Call) Return(n int64, err error) *MockFileSystem_GetDiskUsage_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockFileSystem_GetDiskUsage_Call) RunAndReturn(run func(ctx context.Context, uid string) (int64, error)) *MockFileSystem_GetDiskUsage_Call {
	_c.Call.Return(run)
	return _c
}

// GetFileContent provides a mock function for the type MockFileSystem
func (_mock *MockFileSystem) GetFileContent(ctx context.Context, uid string, path string) ([]byte, string, error) {
	ret := _mock.Called(ctx, uid, path)

	if len(ret) == 0 {
		panic("no return value specified for GetFileContent")
	}

	var r0 []byte
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) ([]byte, string, error)); ok {
		return returnFunc(ctx, uid, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) []byte); ok {
		r0 = returnFunc(ctx, uid, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) string); ok {
		r1 = returnFunc(ctx, uid, path)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = returnFunc(ctx, uid, path)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockFileSystem_GetFileContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileContent'
type MockFileSystem_GetFileContent_Call struct {
	*mock.Call
}

// GetFileContent is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - path string
func (_e *MockFileSystem_Expecter) GetFileContent(ctx interface{}, uid interface{}, path interface{}) *MockFileSystem_GetFileContent_Call {
	return &MockFileSystem_GetFileContent_Call{Call: _e.mock.On("GetFileContent", ctx, uid, path)}
}

func (_c *MockFileSystem_GetFileContent_Call) Run(run func(ctx context.Context, uid string, path string)) *MockFileSystem_GetFileContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFileSystem_GetFileContent_Call) Return(bytes []byte, s string, err error) *MockFileSystem_GetFileContent_Call {
	_c.Call.Return(bytes, s, err)
	return _c
}

func (_c *MockFileSystem_GetFileContent_Call) RunAndReturn(run func(ctx context.Context, uid string, path string) ([]byte, string, error)) *MockFileSystem_GetFileContent_Call {
	_c.Call.Return(run)
	return _c
}

// ListFiles provides a mock function for the type MockFileSystem
func (_mock *MockFileSystem) ListFiles(ctx context.Context, uid string, path string) ([]domain.FileInfo, error) {
	ret := _mock.Called(ctx, uid, path)

	if len(ret) == 0 {
		panic("no return value specified for ListFiles")
	}

	var r0 []domain.FileInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) ([]domain.FileInfo, error)); ok {
		return returnFunc(ctx, uid, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) []domain.FileInfo); ok {
		r0 = returnFunc(ctx, uid, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FileInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, uid, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileSystem_ListFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFiles'
type MockFileSystem_ListFiles_Call struct {
	*mock.Call
}

// ListFiles is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - path string
func (_e *MockFileSystem_Expecter) ListFiles(ctx interface{}, uid interface{}, path interface{}) *MockFileSystem_ListFiles_Call {
	return &MockFileSystem_ListFiles_Call{Call: _e.mock.On("ListFiles", ctx, uid, path)}
}

func (_c *MockFileSystem_ListFiles_Call) Run(run func(ctx context.Context, uid string, path string)) *MockFileSystem_ListFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFileSystem_ListFiles_Call) Return(fileInfos []domain.FileInfo, err error) *MockFileSystem_ListFiles_Call {
	_c.Call.Return(fileInfos, err)
	return _c
}

func (_c *MockFileSystem_ListFiles_Call) RunAndReturn(run func(ctx context.Context, uid string, path string) ([]domain.FileInfo, error)) *MockFileSystem_ListFiles_Call {
	_c.Call.Return(run)
	return _c
}

// RenameFile provides a mock function for the type MockFileSystem
func (_mock *MockFileSystem) RenameFile(ctx context.Context, uid string, oldPath string, newPath string) error {
	ret := _mock.Called(ctx, uid, oldPath, newPath)

	if len(ret) == 0 {
		panic("no return value specified for RenameFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = returnFunc(ctx, uid, oldPath, newPath)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileSystem_RenameFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenameFile'
type MockFileSystem_RenameFile_Call struct {
	*mock.Call
}

// RenameFile is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - oldPath string
//   - newPath string
func (_e *MockFileSystem_Expecter) RenameFile(ctx interface{}, uid interface{}, oldPath interface{}, newPath interface{}) *MockFileSystem_RenameFile_Call {
	return &MockFileSystem_RenameFile_Call{Call: _e.mock.On("RenameFile", ctx, uid, oldPath, newPath)}
}

func (_c *MockFileSystem_RenameFile_Call) Run(run func(ctx context.Context, uid string, oldPath string, newPath string)) *MockFileSystem_RenameFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockFileSystem_RenameFile_Call) Return(err error) *MockFileSystem_RenameFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileSystem_RenameFile_Call) RunAndReturn(run func(ctx context.Context, uid string, oldPath string, newPath string) error) *MockFileSystem_RenameFile_Call {
	_c.Call.Return(run)
	return _c
}

// UploadFile provides a mock function for the type MockFileSystem
func (_mock *MockFileSystem) UploadFile(ctx context.Context, uid string, path string, fileData []byte) error {
	ret := _mock.Called(ctx, uid, path, fileData)

	if len(ret) == 0 {
		panic("no return value specified for UploadFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, []byte) error); ok {
		r0 = returnFunc(ctx, uid, path, fileData)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileSystem_UploadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFile'
type MockFileSystem_UploadFile_Call struct {
	*mock.Call
}

// UploadFile is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - path string
//   - fileData []byte
func (_e *MockFileSystem_Expecter) UploadFile(ctx interface{}, uid interface{}, path interface{}, fileData interface{}) *MockFileSystem_UploadFile_Call {
	return &MockFileSystem_UploadFile_Call{Call: _e.mock.On("UploadFile", ctx, uid, path, fileData)}
}

func (_c *MockFileSystem_UploadFile_Call) Run(run func(ctx context.Context, uid string, path string, fileData []byte)) *MockFileSystem_UploadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []byte
		if args[3] != nil {
			arg3 = args[3].([]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockFileSystem_UploadFile_Call) Return(err error) *MockFileSystem_UploadFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileSystem_UploadFile_Call) RunAndReturn(run func(ctx context.Context, uid string, path string, fileData []byte) error) *MockFileSystem_UploadFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFileBrowserService creates a new instance of MockFileBrowserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileBrowserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileBrowserService {
	mock := &MockFileBrowserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFileBrowserService is an autogenerated mock type for the FileBrowserService type
type MockFileBrowserService struct {
	mock.Mock
}

type MockFileBrowserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileBrowserService) EXPECT() *MockFileBrowserService_Expecter {
	return &MockFileBrowserService_Expecter{mock: &_m.Mock}
}

// CleanPath provides a mock function for the type MockFileBrowserService
func (_mock *MockFileBrowserService) CleanPath(path string) string {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for CleanPath")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockFileBrowserService_CleanPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanPath'
type MockFileBrowserService_CleanPath_Call struct {
	*mock.Call
}

// CleanPath is a helper method to define mock.On call
//   - path string
func (_e *MockFileBrowserService_Expecter) CleanPath(path interface{}) *MockFileBrowserService_CleanPath_Call {
	return &MockFileBrowserService_CleanPath_Call{Call: _e.mock.On("CleanPath", path)}
}

func (_c *MockFileBrowserService_CleanPath_Call) Run(run func(path string)) *MockFileBrowserService_CleanPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFileBrowserService_CleanPath_Call) Return(s string) *MockFileBrowserService_CleanPath_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockFileBrowserService_CleanPath_Call) RunAndReturn(run func(path string) string) *MockFileBrowserService_CleanPath_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFolder provides a mock function for the type MockFileBrowserService
func (_mock *MockFileBrowserService) CreateFolder(ctx context.Context, uid string, path string) error {
	ret := _mock.Called(ctx, uid, path)

	if len(ret) == 0 {
		panic("no return value specified for CreateFolder")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, uid, path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileBrowserService_CreateFolder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFolder'
type MockFileBrowserService_CreateFolder_Call struct {
	*mock.Call
}

// CreateFolder is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - path string
func (_e *MockFileBrowserService_Expecter) CreateFolder(ctx interface{}, uid interface{}, path interface{}) *MockFileBrowserService_CreateFolder_Call {
	return &MockFileBrowserService_CreateFolder_Call{Call: _e.mock.On("CreateFolder", ctx, uid, path)}
}

func (_c *MockFileBrowserService_CreateFolder_Call) Run(run func(ctx context.Context, uid string, path string)) *MockFileBrowserService_CreateFolder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFileBrowserService_CreateFolder_Call) Return(err error) *MockFileBrowserService_CreateFolder_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileBrowserService_CreateFolder_Call) RunAndReturn(run func(ctx context.Context, uid string, path string) error) *MockFileBrowserService_CreateFolder_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFile provides a mock function for the type MockFileBrowserService
func (_mock *MockFileBrowserService) DeleteFile(ctx context.Context, uid string, path string) error {
	ret := _mock.Called(ctx, uid, path)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, uid, path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileBrowserService_DeleteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFile'
type MockFileBrowserService_DeleteFile_Call struct {
	*mock.Call
}

// DeleteFile is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - path string
func (_e *MockFileBrowserService_Expecter) DeleteFile(ctx interface{}, uid interface{}, path interface{}) *MockFileBrowserService_DeleteFile_Call {
	return &MockFileBrowserService_DeleteFile_Call{Call: _e.mock.On("DeleteFile", ctx, uid, path)}
}

func (_c *MockFileBrowserService_DeleteFile_Call) Run(run func(ctx context.Context, uid string, path string)) *MockFileBrowserService_DeleteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFileBrowserService_DeleteFile_Call) Return(err error) *MockFileBrowserService_DeleteFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileBrowserService_DeleteFile_Call) RunAndReturn(run func(ctx context.Context, uid string, path string) error) *MockFileBrowserService_DeleteFile_Call {
	_c.Call.Return(run)
	return _c
}

// FileExists provides a mock function for the type MockFileBrowserService
func (_mock *MockFileBrowserService) FileExists(ctx context.Context, uid string, path string) (bool, error) {
	ret := _mock.Called(ctx, uid, path)

	if len(ret) == 0 {
		panic("no return value specified for FileExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return returnFunc(ctx, uid, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = returnFunc(ctx, uid, path)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, uid, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileBrowserService_FileExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FileExists'
type MockFileBrowserService_FileExists_Call struct {
	*mock.Call
}

// FileExists is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - path string
func (_e *MockFileBrowserService_Expecter) FileExists(ctx interface{}, uid interface{}, path interface{}) *MockFileBrowserService_FileExists_Call {
	return &MockFileBrowserService_FileExists_Call{Call: _e.mock.On("FileExists", ctx, uid, path)}
}

func (_c *MockFileBrowserService_FileExists_Call) Run(run func(ctx context.Context, uid string, path string)) *MockFileBrowserService_FileExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFileBrowserService_FileExists_Call) Return(b bool, err error) *MockFileBrowserService_FileExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockFileBrowserService_FileExists_Call) RunAndReturn(run func(ctx context.Context, uid string, path string) (bool, error)) *MockFileBrowserService_FileExists_Call {
	_c.Call.Return(run)
	return _c
}

// FileInternalName provides a mock function for the type MockFileBrowserService
func (_mock *MockFileBrowserService) FileInternalName(ctx context.Context, uid string, path string) (string, error) {
	ret := _mock.Called(ctx, uid, path)

	if len(ret) == 0 {
		panic("no return value specified for FileInternalName")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return returnFunc(ctx, uid, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = returnFunc(ctx, uid, path)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, uid, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileBrowserService_FileInternalName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FileInternalName'
type MockFileBrowserService_FileInternalName_Call struct {
	*mock.Call
}

// FileInternalName is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - path string
func (_e *MockFileBrowserService_Expecter) FileInternalName(ctx interface{}, uid interface{}, path interface{}) *MockFileBrowserService_FileInternalName_Call {
	return &MockFileBrowserService_FileInternalName_Call{Call: _e.mock.On("FileInternalName", ctx, uid, path)}
}

func (_c *MockFileBrowserService_FileInternalName_Call) Run(run func(ctx context.Context, uid string, path string)) *MockFileBrowserService_FileInternalName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFileBrowserService_FileInternalName_Call) Return(s string, err error) *MockFileBrowserService_FileInternalName_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockFileBrowserService_FileInternalName_Call) RunAndReturn(run func(ctx context.Context, uid string, path string) (string, error)) *MockFileBrowserService_FileInternalName_Call {
	_c.Call.Return(run)
	return _c
}

// GetFileContent provides a mock function for the type MockFileBrowserService
func (_mock *MockFileBrowserService) GetFileContent(ctx context.Context, uid string, path string) ([]byte, string, error) {
	ret := _mock.Called(ctx, uid, path)

	if len(ret) == 0 {
		panic("no return value specified for GetFileContent")
	}

	var r0 []byte
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) ([]byte, string, error)); ok {
		return returnFunc(ctx, uid, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) []byte); ok {
		r0 = returnFunc(ctx, uid, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) string); ok {
		r1 = returnFunc(ctx, uid, path)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = returnFunc(ctx, uid, path)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockFileBrowserService_GetFileContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileContent'
type MockFileBrowserService_GetFileContent_Call struct {
	*mock.Call
}

// GetFileContent is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - path string
func (_e *MockFileBrowserService_Expecter) GetFileContent(ctx interface{}, uid interface{}, path interface{}) *MockFileBrowserService_GetFileContent_Call {
	return &MockFileBrowserService_GetFileContent_Call{Call: _e.mock.On("GetFileContent", ctx, uid, path)}
}

func (_c *MockFileBrowserService_GetFileContent_Call) Run(run func(ctx context.Context, uid string, path string)) *MockFileBrowserService_GetFileContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFileBrowserService_GetFileContent_Call) Return(bytes []byte, s string, err error) *MockFileBrowserService_GetFileContent_Call {
	_c.Call.Return(bytes, s, err)
	return _c
}

func (_c *MockFileBrowserService_GetFileContent_Call) RunAndReturn(run func(ctx context.Context, uid string, path string) ([]byte, string, error)) *MockFileBrowserService_GetFileContent_Call {
	_c.Call.Return(run)
	return _c
}

// ListFiles provides a mock function for the type MockFileBrowserService
func (_mock *MockFileBrowserService) ListFiles(ctx context.Context, uid string, path string) ([]domain.FileInfo, error) {
	ret := _mock.Called(ctx, uid, path)

	if len(ret) == 0 {
		panic("no return value specified for ListFiles")
	}

	var r0 []domain.FileInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) ([]domain.FileInfo, error)); ok {
		return returnFunc(ctx, uid, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) []domain.FileInfo); ok {
		r0 = returnFunc(ctx, uid, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FileInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, uid, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileBrowserService_ListFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFiles'
type MockFileBrowserService_ListFiles_Call struct {
	*mock.Call
}

// ListFiles is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - path string
func (_e *MockFileBrowserService_Expecter) ListFiles(ctx interface{}, uid interface{}, path interface{}) *MockFileBrowserService_ListFiles_Call {
	return &MockFileBrowserService_ListFiles_Call{Call: _e.mock.On("ListFiles", ctx, uid, path)}
}

func (_c *MockFileBrowserService_ListFiles_Call) Run(run func(ctx context.Context, uid string, path string)) *MockFileBrowserService_ListFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFileBrowserService_ListFiles_Call) Return(fileInfos []domain.FileInfo, err error) *MockFileBrowserService_ListFiles_Call {
	_c.Call.Return(fileInfos, err)
	return _c
}

func (_c *MockFileBrowserService_ListFiles_Call) RunAndReturn(run func(ctx context.Context, uid string, path string) ([]domain.FileInfo, error)) *MockFileBrowserService_ListFiles_Call {
	_c.Call.Return(run)
	return _c
}

// RenameFile provides a mock function for the type MockFileBrowserService
func (_mock *MockFileBrowserService) RenameFile(ctx context.Context, uid string, oldPath string, newPath string) error {
	ret := _mock.Called(ctx, uid, oldPath, newPath)

	if len(ret) == 0 {
		panic("no return value specified for RenameFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = returnFunc(ctx, uid, oldPath, newPath)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileBrowserService_RenameFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenameFile'
type MockFileBrowserService_RenameFile_Call struct {
	*mock.Call
}

// RenameFile is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - oldPath string
//   - newPath string
func (_e *MockFileBrowserService_Expecter) RenameFile(ctx interface{}, uid interface{}, oldPath interface{}, newPath interface{}) *MockFileBrowserService_RenameFile_Call {
	return &MockFileBrowserService_RenameFile_Call{Call: _e.mock.On("RenameFile", ctx, uid, oldPath, newPath)}
}

func (_c *MockFileBrowserService_RenameFile_Call) Run(run func(ctx context.Context, uid string, oldPath string, newPath string)) *MockFileBrowserService_RenameFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockFileBrowserService_RenameFile_Call) Return(err error) *MockFileBrowserService_RenameFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileBrowserService_RenameFile_Call) RunAndReturn(run func(ctx context.Context, uid string, oldPath string, newPath string) error) *MockFileBrowserService_RenameFile_Call {
	_c.Call.Return(run)
	return _c
}

// UploadFile provides a mock function for the type MockFileBrowserService
func (_mock *MockFileBrowserService) UploadFile(ctx context.Context, uid string, path string, fileData []byte) error {
	ret := _mock.Called(ctx, uid, path, fileData)

	if len(ret) == 0 {
		panic("no return value specified for UploadFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, []byte) error); ok {
		r0 = returnFunc(ctx, uid, path, fileData)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileBrowserService_UploadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFile'
type MockFileBrowserService_UploadFile_Call struct {
	*mock.Call
}

// UploadFile is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - path string
//   - fileData []byte
func (_e *MockFileBrowserService_Expecter) UploadFile(ctx interface{}, uid interface{}, path interface{}, fileData interface{}) *MockFileBrowserService_UploadFile_Call {
	return &MockFileBrowserService_UploadFile_Call{Call: _e.mock.On("UploadFile", ctx, uid, path, fileData)}
}

func (_c *MockFileBrowserService_UploadFile_Call) Run(run func(ctx context.Context, uid string, path string, fileData []byte)) *MockFileBrowserService_UploadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []byte
		if args[3] != nil {
			arg3 = args[3].([]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockFileBrowserService_UploadFile_Call) Return(err error) *MockFileBrowserService_UploadFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileBrowserService_UploadFile_Call) RunAndReturn(run func(ctx context.Context, uid string, path string, fileData []byte) error) *MockFileBrowserService_UploadFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLastOpenedService creates a new instance of MockLastOpenedService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLastOpenedService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLastOpenedService {
	mock := &MockLastOpenedService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLastOpenedService is an autogenerated mock type for the LastOpenedService type
type MockLastOpenedService struct {
	mock.Mock
}

type MockLastOpenedService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLastOpenedService) EXPECT() *MockLastOpenedService_Expecter {
	return &MockLastOpenedService_Expecter{mock: &_m.Mock}
}

// GetLastOpened provides a mock function for the type MockLastOpenedService
func (_mock *MockLastOpenedService) GetLastOpened(ctx context.Context, itemType domain.LastOpenedType, uid string) (string, error) {
	ret := _mock.Called(ctx, itemType, uid)

	if len(ret) == 0 {
		panic("no return value specified for GetLastOpened")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.LastOpenedType, string) (string, error)); ok {
		return returnFunc(ctx, itemType, uid)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.LastOpenedType, string) string); ok {
		r0 = returnFunc(ctx, itemType, uid)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.LastOpenedType, string) error); ok {
		r1 = returnFunc(ctx, itemType, uid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLastOpenedService_GetLastOpened_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastOpened'
type MockLastOpenedService_GetLastOpened_Call struct {
	*mock.Call
}

// GetLastOpened is a helper method to define mock.On call
//   - ctx context.Context
//   - itemType domain.LastOpenedType
//   - uid string
func (_e *MockLastOpenedService_Expecter) GetLastOpened(ctx interface{}, itemType interface{}, uid interface{}) *MockLastOpenedService_GetLastOpened_Call {
	return &MockLastOpenedService_GetLastOpened_Call{Call: _e.mock.On("GetLastOpened", ctx, itemType, uid)}
}

func (_c *MockLastOpenedService_GetLastOpened_Call) Run(run func(ctx context.Context, itemType domain.LastOpenedType, uid string)) *MockLastOpenedService_GetLastOpened_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.LastOpenedType
		if args[1] != nil {
			arg1 = args[1].(domain.LastOpenedType)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockLastOpenedService_GetLastOpened_Call) Return(s string, err error) *MockLastOpenedService_GetLastOpened_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockLastOpenedService_GetLastOpened_Call) RunAndReturn(run func(ctx context.Context, itemType domain.LastOpenedType, uid string) (string, error)) *MockLastOpenedService_GetLastOpened_Call {
	_c.Call.Return(run)
	return _c
}

// SetLastOpened provides a mock function for the type MockLastOpenedService
func (_mock *MockLastOpenedService) SetLastOpened(ctx context.Context, itemType domain.LastOpenedType, uid string, itemID string) error {
	ret := _mock.Called(ctx, itemType, uid, itemID)

	if len(ret) == 0 {
		panic("no return value specified for SetLastOpened")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.LastOpenedType, string, string) error); ok {
		r0 = returnFunc(ctx, itemType, uid, itemID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLastOpenedService_SetLastOpened_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLastOpened'
type MockLastOpenedService_SetLastOpened_Call struct {
	*mock.Call
}

// SetLastOpened is a helper method to define mock.On call
//   - ctx context.Context
//   - itemType domain.LastOpenedType
//   - uid string
//   - itemID string
func (_e *MockLastOpenedService_Expecter) SetLastOpened(ctx interface{}, itemType interface{}, uid interface{}, itemID interface{}) *MockLastOpenedService_SetLastOpened_Call {
	return &MockLastOpenedService_SetLastOpened_Call{Call: _e.mock.On("SetLastOpened", ctx, itemType, uid, itemID)}
}

func (_c *MockLastOpenedService_SetLastOpened_Call) Run(run func(ctx context.Context, itemType domain.LastOpenedType, uid string, itemID string)) *MockLastOpenedService_SetLastOpened_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.LastOpenedType
		if args[1] != nil {
			arg1 = args[1].(domain.LastOpenedType)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockLastOpenedService_SetLastOpened_Call) Return(err error) *MockLastOpenedService_SetLastOpened_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLastOpenedService_SetLastOpened_Call) RunAndReturn(run func(ctx context.Context, itemType domain.LastOpenedType, uid string, itemID string) error) *MockLastOpenedService_SetLastOpened_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLoggingService creates a new instance of MockLoggingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLoggingService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLoggingService {
	mock := &MockLoggingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLoggingService is an autogenerated mock type for the LoggingService type
type MockLoggingService struct {
	mock.Mock
}

type MockLoggingService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLoggingService) EXPECT() *MockLoggingService_Expecter {
	return &MockLoggingService_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function for the type MockLoggingService
func (_mock *MockLoggingService) Debug(ctx context.Context, msg string, bag ...LoggerBag) {
	if len(bag) > 0 {
		_mock.Called(ctx, msg, bag)
	} else {
		_mock.Called(ctx, msg)
	}

	return
}

// MockLoggingService_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type MockLoggingService_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
//   - bag ...LoggerBag
func (_e *MockLoggingService_Expecter) Debug(ctx interface{}, msg interface{}, bag ...interface{}) *MockLoggingService_Debug_Call {
	return &MockLoggingService_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{ctx, msg}, bag...)...)}
}

func (_c *MockLoggingService_Debug_Call) Run(run func(ctx context.Context, msg string, bag ...LoggerBag)) *MockLoggingService_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []LoggerBag
		var variadicArgs []LoggerBag
		if len(args) > 2 {
			variadicArgs = args[2].([]LoggerBag)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockLoggingService_Debug_Call) Return() *MockLoggingService_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLoggingService_Debug_Call) RunAndReturn(run func(ctx context.Context, msg string, bag ...LoggerBag)) *MockLoggingService_Debug_Call {
	_c.Run(run)
	return _c
}

// Error provides a mock function for the type MockLoggingService
func (_mock *MockLoggingService) Error(ctx context.Context, msg string, bag ...LoggerBag) {
	if len(bag) > 0 {
		_mock.Called(ctx, msg, bag)
	} else {
		_mock.Called(ctx, msg)
	}

	return
}

// MockLoggingService_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockLoggingService_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
//   - bag ...LoggerBag
func (_e *MockLoggingService_Expecter) Error(ctx interface{}, msg interface{}, bag ...interface{}) *MockLoggingService_Error_Call {
	return &MockLoggingService_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{ctx, msg}, bag...)...)}
}

func (_c *MockLoggingService_Error_Call) Run(run func(ctx context.Context, msg string, bag ...LoggerBag)) *MockLoggingService_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []LoggerBag
		var variadicArgs []LoggerBag
		if len(args) > 2 {
			variadicArgs = args[2].([]LoggerBag)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockLoggingService_Error_Call) Return() *MockLoggingService_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLoggingService_Error_Call) RunAndReturn(run func(ctx context.Context, msg string, bag ...LoggerBag)) *MockLoggingService_Error_Call {
	_c.Run(run)
	return _c
}

// Info provides a mock function for the type MockLoggingService
func (_mock *MockLoggingService) Info(ctx context.Context, msg string, bag ...LoggerBag) {
	if len(bag) > 0 {
		_mock.Called(ctx, msg, bag)
	} else {
		_mock.Called(ctx, msg)
	}

	return
}

// MockLoggingService_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockLoggingService_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
//   - bag ...LoggerBag
func (_e *MockLoggingService_Expecter) Info(ctx interface{}, msg interface{}, bag ...interface{}) *MockLoggingService_Info_Call {
	return &MockLoggingService_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{ctx, msg}, bag...)...)}
}

func (_c *MockLoggingService_Info_Call) Run(run func(ctx context.Context, msg string, bag ...LoggerBag)) *MockLoggingService_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []LoggerBag
		var variadicArgs []LoggerBag
		if len(args) > 2 {
			variadicArgs = args[2].([]LoggerBag)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockLoggingService_Info_Call) Return() *MockLoggingService_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLoggingService_Info_Call) RunAndReturn(run func(ctx context.Context, msg string, bag ...LoggerBag)) *MockLoggingService_Info_Call {
	_c.Run(run)
	return _c
}

// Warn provides a mock function for the type MockLoggingService
func (_mock *MockLoggingService) Warn(ctx context.Context, msg string, bag ...LoggerBag) {
	if len(bag) > 0 {
		_mock.Called(ctx, msg, bag)
	} else {
		_mock.Called(ctx, msg)
	}

	return
}

// MockLoggingService_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type MockLoggingService_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
//   - bag ...LoggerBag
func (_e *MockLoggingService_Expecter) Warn(ctx interface{}, msg interface{}, bag ...interface{}) *MockLoggingService_Warn_Call {
	return &MockLoggingService_Warn_Call{Call: _e.mock.On("Warn",
		append([]interface{}{ctx, msg}, bag...)...)}
}

func (_c *MockLoggingService_Warn_Call) Run(run func(ctx context.Context, msg string, bag ...LoggerBag)) *MockLoggingService_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []LoggerBag
		var variadicArgs []LoggerBag
		if len(args) > 2 {
			variadicArgs = args[2].([]LoggerBag)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockLoggingService_Warn_Call) Return() *MockLoggingService_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLoggingService_Warn_Call) RunAndReturn(run func(ctx context.Context, msg string, bag ...LoggerBag)) *MockLoggingService_Warn_Call {
	_c.Run(run)
	return _c
}

// NewMockNotificationService creates a new instance of MockNotificationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotificationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotificationService {
	mock := &MockNotificationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockNotificationService is an autogenerated mock type for the NotificationService type
type MockNotificationService struct {
	mock.Mock
}

type MockNotificationService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotificationService) EXPECT() *MockNotificationService_Expecter {
	return &MockNotificationService_Expecter{mock: &_m.Mock}
}

// Send provides a mock function for the type MockNotificationService
func (_mock *MockNotificationService) Send(ctx context.Context, message *domain.Notification) error {
	ret := _mock.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Notification) error); ok {
		r0 = returnFunc(ctx, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNotificationService_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockNotificationService_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - message *domain.Notification
func (_e *MockNotificationService_Expecter) Send(ctx interface{}, message interface{}) *MockNotificationService_Send_Call {
	return &MockNotificationService_Send_Call{Call: _e.mock.On("Send", ctx, message)}
}

func (_c *MockNotificationService_Send_Call) Run(run func(ctx context.Context, message *domain.Notification)) *MockNotificationService_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Notification
		if args[1] != nil {
			arg1 = args[1].(*domain.Notification)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockNotificationService_Send_Call) Return(err error) *MockNotificationService_Send_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNotificationService_Send_Call) RunAndReturn(run func(ctx context.Context, message *domain.Notification) error) *MockNotificationService_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotesService creates a new instance of MockNotesService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotesService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotesService {
	mock := &MockNotesService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockNotesService is an autogenerated mock type for the NotesService type
type MockNotesService struct {
	mock.Mock
}

type MockNotesService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotesService) EXPECT() *MockNotesService_Expecter {
	return &MockNotesService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockNotesService
func (_mock *MockNotesService) Create(ctx context.Context, uid string, req *domain.Note) (string, error) {
	ret := _mock.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.Note) (string, error)); ok {
		return returnFunc(ctx, uid, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.Note) string); ok {
		r0 = returnFunc(ctx, uid, req)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.Note) error); ok {
		r1 = returnFunc(ctx, uid, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotesService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockNotesService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req *domain.Note
func (_e *MockNotesService_Expecter) Create(ctx interface{}, uid interface{}, req interface{}) *MockNotesService_Create_Call {
	return &MockNotesService_Create_Call{Call: _e.mock.On("Create", ctx, uid, req)}
}

func (_c *MockNotesService_Create_Call) Run(run func(ctx context.Context, uid string, req *domain.Note)) *MockNotesService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.Note
		if args[2] != nil {
			arg2 = args[2].(*domain.Note)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockNotesService_Create_Call) Return(s string, err error) *MockNotesService_Create_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockNotesService_Create_Call) RunAndReturn(run func(ctx context.Context, uid string, req *domain.Note) (string, error)) *MockNotesService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockNotesService
func (_mock *MockNotesService) Delete(ctx context.Context, uid string, id string) error {
	ret := _mock.Called(ctx, uid, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, uid, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNotesService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockNotesService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - id string
func (_e *MockNotesService_Expecter) Delete(ctx interface{}, uid interface{}, id interface{}) *MockNotesService_Delete_Call {
	return &MockNotesService_Delete_Call{Call: _e.mock.On("Delete", ctx, uid, id)}
}

func (_c *MockNotesService_Delete_Call) Run(run func(ctx context.Context, uid string, id string)) *MockNotesService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockNotesService_Delete_Call) Return(err error) *MockNotesService_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNotesService_Delete_Call) RunAndReturn(run func(ctx context.Context, uid string, id string) error) *MockNotesService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetCount provides a mock function for the type MockNotesService
func (_mock *MockNotesService) GetCount(ctx context.Context, uid string, req *domain.NoteSearchRequest) (int64, error) {
	ret := _mock.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for GetCount")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.NoteSearchRequest) (int64, error)); ok {
		return returnFunc(ctx, uid, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.NoteSearchRequest) int64); ok {
		r0 = returnFunc(ctx, uid, req)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.NoteSearchRequest) error); ok {
		r1 = returnFunc(ctx, uid, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotesService_GetCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCount'
type MockNotesService_GetCount_Call struct {
	*mock.Call
}

// GetCount is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req *domain.NoteSearchRequest
func (_e *MockNotesService_Expecter) GetCount(ctx interface{}, uid interface{}, req interface{}) *MockNotesService_GetCount_Call {
	return &MockNotesService_GetCount_Call{Call: _e.mock.On("GetCount", ctx, uid, req)}
}

func (_c *MockNotesService_GetCount_Call) Run(run func(ctx context.Context, uid string, req *domain.NoteSearchRequest)) *MockNotesService_GetCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.NoteSearchRequest
		if args[2] != nil {
			arg2 = args[2].(*domain.NoteSearchRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockNotesService_GetCount_Call) Return(n int64, err error) *MockNotesService_GetCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockNotesService_GetCount_Call) RunAndReturn(run func(ctx context.Context, uid string, req *domain.NoteSearchRequest) (int64, error)) *MockNotesService_GetCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetItem provides a mock function for the type MockNotesService
func (_mock *MockNotesService) GetItem(ctx context.Context, uid string, id string) (*domain.Note, error) {
	ret := _mock.Called(ctx, uid, id)

	if len(ret) == 0 {
		panic("no return value specified for GetItem")
	}

	var r0 *domain.Note
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*domain.Note, error)); ok {
		return returnFunc(ctx, uid, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *domain.Note); ok {
		r0 = returnFunc(ctx, uid, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Note)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, uid, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotesService_GetItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItem'
type MockNotesService_GetItem_Call struct {
	*mock.Call
}

// GetItem is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - id string
func (_e *MockNotesService_Expecter) GetItem(ctx interface{}, uid interface{}, id interface{}) *MockNotesService_GetItem_Call {
	return &MockNotesService_GetItem_Call{Call: _e.mock.On("GetItem", ctx, uid, id)}
}

func (_c *MockNotesService_GetItem_Call) Run(run func(ctx context.Context, uid string, id string)) *MockNotesService_GetItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockNotesService_GetItem_Call) Return(note *domain.Note, err error) *MockNotesService_GetItem_Call {
	_c.Call.Return(note, err)
	return _c
}

func (_c *MockNotesService_GetItem_Call) RunAndReturn(run func(ctx context.Context, uid string, id string) (*domain.Note, error)) *MockNotesService_GetItem_Call {
	_c.Call.Return(run)
	return _c
}

// GetItems provides a mock function for the type MockNotesService
func (_mock *MockNotesService) GetItems(ctx context.Context, uid string, req *domain.NoteSearchRequest) ([]domain.Note, error) {
	ret := _mock.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for GetItems")
	}

	var r0 []domain.Note
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.NoteSearchRequest) ([]domain.Note, error)); ok {
		return returnFunc(ctx, uid, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.NoteSearchRequest) []domain.Note); ok {
		r0 = returnFunc(ctx, uid, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Note)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.NoteSearchRequest) error); ok {
		r1 = returnFunc(ctx, uid, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotesService_GetItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItems'
type MockNotesService_GetItems_Call struct {
	*mock.Call
}

// GetItems is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req *domain.NoteSearchRequest
func (_e *MockNotesService_Expecter) GetItems(ctx interface{}, uid interface{}, req interface{}) *MockNotesService_GetItems_Call {
	return &MockNotesService_GetItems_Call{Call: _e.mock.On("GetItems", ctx, uid, req)}
}

func (_c *MockNotesService_GetItems_Call) Run(run func(ctx context.Context, uid string, req *domain.NoteSearchRequest)) *MockNotesService_GetItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.NoteSearchRequest
		if args[2] != nil {
			arg2 = args[2].(*domain.NoteSearchRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockNotesService_GetItems_Call) Return(notes []domain.Note, err error) *MockNotesService_GetItems_Call {
	_c.Call.Return(notes, err)
	return _c
}

func (_c *MockNotesService_GetItems_Call) RunAndReturn(run func(ctx context.Context, uid string, req *domain.NoteSearchRequest) ([]domain.Note, error)) *MockNotesService_GetItems_Call {
	_c.Call.Return(run)
	return _c
}

// GetItemsMap provides a mock function for the type MockNotesService
func (_mock *MockNotesService) GetItemsMap(ctx context.Context, uid string, req *domain.NoteSearchRequest) ([]domain.Note, error) {
	ret := _mock.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for GetItemsMap")
	}

	var r0 []domain.Note
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.NoteSearchRequest) ([]domain.Note, error)); ok {
		return returnFunc(ctx, uid, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.NoteSearchRequest) []domain.Note); ok {
		r0 = returnFunc(ctx, uid, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Note)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.NoteSearchRequest) error); ok {
		r1 = returnFunc(ctx, uid, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotesService_GetItemsMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItemsMap'
type MockNotesService_GetItemsMap_Call struct {
	*mock.Call
}

// GetItemsMap is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req *domain.NoteSearchRequest
func (_e *MockNotesService_Expecter) GetItemsMap(ctx interface{}, uid interface{}, req interface{}) *MockNotesService_GetItemsMap_Call {
	return &MockNotesService_GetItemsMap_Call{Call: _e.mock.On("GetItemsMap", ctx, uid, req)}
}

func (_c *MockNotesService_GetItemsMap_Call) Run(run func(ctx context.Context, uid string, req *domain.NoteSearchRequest)) *MockNotesService_GetItemsMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.NoteSearchRequest
		if args[2] != nil {
			arg2 = args[2].(*domain.NoteSearchRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockNotesService_GetItemsMap_Call) Return(notes []domain.Note, err error) *MockNotesService_GetItemsMap_Call {
	_c.Call.Return(notes, err)
	return _c
}

func (_c *MockNotesService_GetItemsMap_Call) RunAndReturn(run func(ctx context.Context, uid string, req *domain.NoteSearchRequest) ([]domain.Note, error)) *MockNotesService_GetItemsMap_Call {
	_c.Call.Return(run)
	return _c
}

// GetTags provides a mock function for the type MockNotesService
func (_mock *MockNotesService) GetTags(ctx context.Context, uid string) ([]string, error) {
	ret := _mock.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for GetTags")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return returnFunc(ctx, uid)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = returnFunc(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotesService_GetTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTags'
type MockNotesService_GetTags_Call struct {
	*mock.Call
}

// GetTags is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
func (_e *MockNotesService_Expecter) GetTags(ctx interface{}, uid interface{}) *MockNotesService_GetTags_Call {
	return &MockNotesService_GetTags_Call{Call: _e.mock.On("GetTags", ctx, uid)}
}

func (_c *MockNotesService_GetTags_Call) Run(run func(ctx context.Context, uid string)) *MockNotesService_GetTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockNotesService_GetTags_Call) Return(strings []string, err error) *MockNotesService_GetTags_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockNotesService_GetTags_Call) RunAndReturn(run func(ctx context.Context, uid string) ([]string, error)) *MockNotesService_GetTags_Call {
	_c.Call.Return(run)
	return _c
}

// SearchItemsByTerm provides a mock function for the type MockNotesService
func (_mock *MockNotesService) SearchItemsByTerm(ctx context.Context, uid string, req *domain.NoteRequest) ([]domain.Note, error) {
	ret := _mock.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for SearchItemsByTerm")
	}

	var r0 []domain.Note
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.NoteRequest) ([]domain.Note, error)); ok {
		return returnFunc(ctx, uid, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.NoteRequest) []domain.Note); ok {
		r0 = returnFunc(ctx, uid, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Note)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.NoteRequest) error); ok {
		r1 = returnFunc(ctx, uid, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotesService_SearchItemsByTerm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchItemsByTerm'
type MockNotesService_SearchItemsByTerm_Call struct {
	*mock.Call
}

// SearchItemsByTerm is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req *domain.NoteRequest
func (_e *MockNotesService_Expecter) SearchItemsByTerm(ctx interface{}, uid interface{}, req interface{}) *MockNotesService_SearchItemsByTerm_Call {
	return &MockNotesService_SearchItemsByTerm_Call{Call: _e.mock.On("SearchItemsByTerm", ctx, uid, req)}
}

func (_c *MockNotesService_SearchItemsByTerm_Call) Run(run func(ctx context.Context, uid string, req *domain.NoteRequest)) *MockNotesService_SearchItemsByTerm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.NoteRequest
		if args[2] != nil {
			arg2 = args[2].(*domain.NoteRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockNotesService_SearchItemsByTerm_Call) Return(notes []domain.Note, err error) *MockNotesService_SearchItemsByTerm_Call {
	_c.Call.Return(notes, err)
	return _c
}

func (_c *MockNotesService_SearchItemsByTerm_Call) RunAndReturn(run func(ctx context.Context, uid string, req *domain.NoteRequest) ([]domain.Note, error)) *MockNotesService_SearchItemsByTerm_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockNotesService
func (_mock *MockNotesService) Update(ctx context.Context, uid string, id string, req *domain.Note) (int64, error) {
	ret := _mock.Called(ctx, uid, id, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, *domain.Note) (int64, error)); ok {
		return returnFunc(ctx, uid, id, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, *domain.Note) int64); ok {
		r0 = returnFunc(ctx, uid, id, req)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, *domain.Note) error); ok {
		r1 = returnFunc(ctx, uid, id, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotesService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockNotesService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - id string
//   - req *domain.Note
func (_e *MockNotesService_Expecter) Update(ctx interface{}, uid interface{}, id interface{}, req interface{}) *MockNotesService_Update_Call {
	return &MockNotesService_Update_Call{Call: _e.mock.On("Update", ctx, uid, id, req)}
}

func (_c *MockNotesService_Update_Call) Run(run func(ctx context.Context, uid string, id string, req *domain.Note)) *MockNotesService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 *domain.Note
		if args[3] != nil {
			arg3 = args[3].(*domain.Note)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockNotesService_Update_Call) Return(n int64, err error) *MockNotesService_Update_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockNotesService_Update_Call) RunAndReturn(run func(ctx context.Context, uid string, id string, req *domain.Note) (int64, error)) *MockNotesService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSecretService creates a new instance of MockSecretService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecretService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecretService {
	mock := &MockSecretService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSecretService is an autogenerated mock type for the SecretService type
type MockSecretService struct {
	mock.Mock
}

type MockSecretService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSecretService) EXPECT() *MockSecretService_Expecter {
	return &MockSecretService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockSecretService
func (_mock *MockSecretService) Create(ctx context.Context, uid string, req *domain.Secret) (string, error) {
	ret := _mock.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.Secret) (string, error)); ok {
		return returnFunc(ctx, uid, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.Secret) string); ok {
		r0 = returnFunc(ctx, uid, req)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.Secret) error); ok {
		r1 = returnFunc(ctx, uid, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSecretService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSecretService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req *domain.Secret
func (_e *MockSecretService_Expecter) Create(ctx interface{}, uid interface{}, req interface{}) *MockSecretService_Create_Call {
	return &MockSecretService_Create_Call{Call: _e.mock.On("Create", ctx, uid, req)}
}

func (_c *MockSecretService_Create_Call) Run(run func(ctx context.Context, uid string, req *domain.Secret)) *MockSecretService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.Secret
		if args[2] != nil {
			arg2 = args[2].(*domain.Secret)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSecretService_Create_Call) Return(s string, err error) *MockSecretService_Create_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockSecretService_Create_Call) RunAndReturn(run func(ctx context.Context, uid string, req *domain.Secret) (string, error)) *MockSecretService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Decrypt provides a mock function for the type MockSecretService
func (_mock *MockSecretService) Decrypt(ctx context.Context, nonce []byte, encoded []byte, key []byte) ([]byte, error) {
	ret := _mock.Called(ctx, nonce, encoded, key)

	if len(ret) == 0 {
		panic("no return value specified for Decrypt")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte, []byte, []byte) ([]byte, error)); ok {
		return returnFunc(ctx, nonce, encoded, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte, []byte, []byte) []byte); ok {
		r0 = returnFunc(ctx, nonce, encoded, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []byte, []byte, []byte) error); ok {
		r1 = returnFunc(ctx, nonce, encoded, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSecretService_Decrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decrypt'
type MockSecretService_Decrypt_Call struct {
	*mock.Call
}

// Decrypt is a helper method to define mock.On call
//   - ctx context.Context
//   - nonce []byte
//   - encoded []byte
//   - key []byte
func (_e *MockSecretService_Expecter) Decrypt(ctx interface{}, nonce interface{}, encoded interface{}, key interface{}) *MockSecretService_Decrypt_Call {
	return &MockSecretService_Decrypt_Call{Call: _e.mock.On("Decrypt", ctx, nonce, encoded, key)}
}

func (_c *MockSecretService_Decrypt_Call) Run(run func(ctx context.Context, nonce []byte, encoded []byte, key []byte)) *MockSecretService_Decrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		var arg2 []byte
		if args[2] != nil {
			arg2 = args[2].([]byte)
		}
		var arg3 []byte
		if args[3] != nil {
			arg3 = args[3].([]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockSecretService_Decrypt_Call) Return(decoded []byte, err error) *MockSecretService_Decrypt_Call {
	_c.Call.Return(decoded, err)
	return _c
}

func (_c *MockSecretService_Decrypt_Call) RunAndReturn(run func(ctx context.Context, nonce []byte, encoded []byte, key []byte) ([]byte, error)) *MockSecretService_Decrypt_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockSecretService
func (_mock *MockSecretService) Delete(ctx context.Context, uid string, id string) error {
	ret := _mock.Called(ctx, uid, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, uid, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSecretService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockSecretService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - id string
func (_e *MockSecretService_Expecter) Delete(ctx interface{}, uid interface{}, id interface{}) *MockSecretService_Delete_Call {
	return &MockSecretService_Delete_Call{Call: _e.mock.On("Delete", ctx, uid, id)}
}

func (_c *MockSecretService_Delete_Call) Run(run func(ctx context.Context, uid string, id string)) *MockSecretService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSecretService_Delete_Call) Return(err error) *MockSecretService_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSecretService_Delete_Call) RunAndReturn(run func(ctx context.Context, uid string, id string) error) *MockSecretService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Encrypt provides a mock function for the type MockSecretService
func (_mock *MockSecretService) Encrypt(ctx context.Context, req *domain.SecretEncodeRequest, key []byte) ([]byte, []byte, error) {
	ret := _mock.Called(ctx, req, key)

	if len(ret) == 0 {
		panic("no return value specified for Encrypt")
	}

	var r0 []byte
	var r1 []byte
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.SecretEncodeRequest, []byte) ([]byte, []byte, error)); ok {
		return returnFunc(ctx, req, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.SecretEncodeRequest, []byte) []byte); ok {
		r0 = returnFunc(ctx, req, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.SecretEncodeRequest, []byte) []byte); ok {
		r1 = returnFunc(ctx, req, key)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, *domain.SecretEncodeRequest, []byte) error); ok {
		r2 = returnFunc(ctx, req, key)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockSecretService_Encrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encrypt'
type MockSecretService_Encrypt_Call struct {
	*mock.Call
}

// Encrypt is a helper method to define mock.On call
//   - ctx context.Context
//   - req *domain.SecretEncodeRequest
//   - key []byte
func (_e *MockSecretService_Expecter) Encrypt(ctx interface{}, req interface{}, key interface{}) *MockSecretService_Encrypt_Call {
	return &MockSecretService_Encrypt_Call{Call: _e.mock.On("Encrypt", ctx, req, key)}
}

func (_c *MockSecretService_Encrypt_Call) Run(run func(ctx context.Context, req *domain.SecretEncodeRequest, key []byte)) *MockSecretService_Encrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.SecretEncodeRequest
		if args[1] != nil {
			arg1 = args[1].(*domain.SecretEncodeRequest)
		}
		var arg2 []byte
		if args[2] != nil {
			arg2 = args[2].([]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSecretService_Encrypt_Call) Return(nonce []byte, encoded []byte, err error) *MockSecretService_Encrypt_Call {
	_c.Call.Return(nonce, encoded, err)
	return _c
}

func (_c *MockSecretService_Encrypt_Call) RunAndReturn(run func(ctx context.Context, req *domain.SecretEncodeRequest, key []byte) ([]byte, []byte, error)) *MockSecretService_Encrypt_Call {
	_c.Call.Return(run)
	return _c
}

// GetCount provides a mock function for the type MockSecretService
func (_mock *MockSecretService) GetCount(ctx context.Context, uid string, req *domain.SecretSearchRequest) (int64, error) {
	ret := _mock.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for GetCount")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.SecretSearchRequest) (int64, error)); ok {
		return returnFunc(ctx, uid, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.SecretSearchRequest) int64); ok {
		r0 = returnFunc(ctx, uid, req)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.SecretSearchRequest) error); ok {
		r1 = returnFunc(ctx, uid, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSecretService_GetCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCount'
type MockSecretService_GetCount_Call struct {
	*mock.Call
}

// GetCount is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req *domain.SecretSearchRequest
func (_e *MockSecretService_Expecter) GetCount(ctx interface{}, uid interface{}, req interface{}) *MockSecretService_GetCount_Call {
	return &MockSecretService_GetCount_Call{Call: _e.mock.On("GetCount", ctx, uid, req)}
}

func (_c *MockSecretService_GetCount_Call) Run(run func(ctx context.Context, uid string, req *domain.SecretSearchRequest)) *MockSecretService_GetCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.SecretSearchRequest
		if args[2] != nil {
			arg2 = args[2].(*domain.SecretSearchRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSecretService_GetCount_Call) Return(n int64, err error) *MockSecretService_GetCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockSecretService_GetCount_Call) RunAndReturn(run func(ctx context.Context, uid string, req *domain.SecretSearchRequest) (int64, error)) *MockSecretService_GetCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetItem provides a mock function for the type MockSecretService
func (_mock *MockSecretService) GetItem(ctx context.Context, uid string, id string) (*domain.Secret, error) {
	ret := _mock.Called(ctx, uid, id)

	if len(ret) == 0 {
		panic("no return value specified for GetItem")
	}

	var r0 *domain.Secret
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*domain.Secret, error)); ok {
		return returnFunc(ctx, uid, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *domain.Secret); ok {
		r0 = returnFunc(ctx, uid, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Secret)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, uid, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSecretService_GetItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItem'
type MockSecretService_GetItem_Call struct {
	*mock.Call
}

// GetItem is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - id string
func (_e *MockSecretService_Expecter) GetItem(ctx interface{}, uid interface{}, id interface{}) *MockSecretService_GetItem_Call {
	return &MockSecretService_GetItem_Call{Call: _e.mock.On("GetItem", ctx, uid, id)}
}

func (_c *MockSecretService_GetItem_Call) Run(run func(ctx context.Context, uid string, id string)) *MockSecretService_GetItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSecretService_GetItem_Call) Return(secret *domain.Secret, err error) *MockSecretService_GetItem_Call {
	_c.Call.Return(secret, err)
	return _c
}

func (_c *MockSecretService_GetItem_Call) RunAndReturn(run func(ctx context.Context, uid string, id string) (*domain.Secret, error)) *MockSecretService_GetItem_Call {
	_c.Call.Return(run)
	return _c
}

// GetItems provides a mock function for the type MockSecretService
func (_mock *MockSecretService) GetItems(ctx context.Context, uid string, req *domain.SecretSearchRequest) ([]domain.Secret, error) {
	ret := _mock.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for GetItems")
	}

	var r0 []domain.Secret
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.SecretSearchRequest) ([]domain.Secret, error)); ok {
		return returnFunc(ctx, uid, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.SecretSearchRequest) []domain.Secret); ok {
		r0 = returnFunc(ctx, uid, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Secret)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.SecretSearchRequest) error); ok {
		r1 = returnFunc(ctx, uid, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSecretService_GetItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItems'
type MockSecretService_GetItems_Call struct {
	*mock.Call
}

// GetItems is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req *domain.SecretSearchRequest
func (_e *MockSecretService_Expecter) GetItems(ctx interface{}, uid interface{}, req interface{}) *MockSecretService_GetItems_Call {
	return &MockSecretService_GetItems_Call{Call: _e.mock.On("GetItems", ctx, uid, req)}
}

func (_c *MockSecretService_GetItems_Call) Run(run func(ctx context.Context, uid string, req *domain.SecretSearchRequest)) *MockSecretService_GetItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.SecretSearchRequest
		if args[2] != nil {
			arg2 = args[2].(*domain.SecretSearchRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSecretService_GetItems_Call) Return(secrets []domain.Secret, err error) *MockSecretService_GetItems_Call {
	_c.Call.Return(secrets, err)
	return _c
}

func (_c *MockSecretService_GetItems_Call) RunAndReturn(run func(ctx context.Context, uid string, req *domain.SecretSearchRequest) ([]domain.Secret, error)) *MockSecretService_GetItems_Call {
	_c.Call.Return(run)
	return _c
}

// GetItemsMap provides a mock function for the type MockSecretService
func (_mock *MockSecretService) GetItemsMap(ctx context.Context, uid string, req *domain.SecretSearchRequest) ([]domain.SecretExportItem, error) {
	ret := _mock.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for GetItemsMap")
	}

	var r0 []domain.SecretExportItem
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.SecretSearchRequest) ([]domain.SecretExportItem, error)); ok {
		return returnFunc(ctx, uid, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.SecretSearchRequest) []domain.SecretExportItem); ok {
		r0 = returnFunc(ctx, uid, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.SecretExportItem)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.SecretSearchRequest) error); ok {
		r1 = returnFunc(ctx, uid, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSecretService_GetItemsMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItemsMap'
type MockSecretService_GetItemsMap_Call struct {
	*mock.Call
}

// GetItemsMap is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req *domain.SecretSearchRequest
func (_e *MockSecretService_Expecter) GetItemsMap(ctx interface{}, uid interface{}, req interface{}) *MockSecretService_GetItemsMap_Call {
	return &MockSecretService_GetItemsMap_Call{Call: _e.mock.On("GetItemsMap", ctx, uid, req)}
}

func (_c *MockSecretService_GetItemsMap_Call) Run(run func(ctx context.Context, uid string, req *domain.SecretSearchRequest)) *MockSecretService_GetItemsMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.SecretSearchRequest
		if args[2] != nil {
			arg2 = args[2].(*domain.SecretSearchRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSecretService_GetItemsMap_Call) Return(secretExportItems []domain.SecretExportItem, err error) *MockSecretService_GetItemsMap_Call {
	_c.Call.Return(secretExportItems, err)
	return _c
}

func (_c *MockSecretService_GetItemsMap_Call) RunAndReturn(run func(ctx context.Context, uid string, req *domain.SecretSearchRequest) ([]domain.SecretExportItem, error)) *MockSecretService_GetItemsMap_Call {
	_c.Call.Return(run)
	return _c
}

// GetTags provides a mock function for the type MockSecretService
func (_mock *MockSecretService) GetTags(ctx context.Context, uid string) ([]string, error) {
	ret := _mock.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for GetTags")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return returnFunc(ctx, uid)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = returnFunc(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSecretService_GetTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTags'
type MockSecretService_GetTags_Call struct {
	*mock.Call
}

// GetTags is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
func (_e *MockSecretService_Expecter) GetTags(ctx interface{}, uid interface{}) *MockSecretService_GetTags_Call {
	return &MockSecretService_GetTags_Call{Call: _e.mock.On("GetTags", ctx, uid)}
}

func (_c *MockSecretService_GetTags_Call) Run(run func(ctx context.Context, uid string)) *MockSecretService_GetTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSecretService_GetTags_Call) Return(strings []string, err error) *MockSecretService_GetTags_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockSecretService_GetTags_Call) RunAndReturn(run func(ctx context.Context, uid string) ([]string, error)) *MockSecretService_GetTags_Call {
	_c.Call.Return(run)
	return _c
}

// SearchItemsByTerm provides a mock function for the type MockSecretService
func (_mock *MockSecretService) SearchItemsByTerm(ctx context.Context, uid string, req *domain.SecretRequest) ([]domain.Secret, error) {
	ret := _mock.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for SearchItemsByTerm")
	}

	var r0 []domain.Secret
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.SecretRequest) ([]domain.Secret, error)); ok {
		return returnFunc(ctx, uid, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.SecretRequest) []domain.Secret); ok {
		r0 = returnFunc(ctx, uid, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Secret)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.SecretRequest) error); ok {
		r1 = returnFunc(ctx, uid, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSecretService_SearchItemsByTerm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchItemsByTerm'
type MockSecretService_SearchItemsByTerm_Call struct {
	*mock.Call
}

// SearchItemsByTerm is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req *domain.SecretRequest
func (_e *MockSecretService_Expecter) SearchItemsByTerm(ctx interface{}, uid interface{}, req interface{}) *MockSecretService_SearchItemsByTerm_Call {
	return &MockSecretService_SearchItemsByTerm_Call{Call: _e.mock.On("SearchItemsByTerm", ctx, uid, req)}
}

func (_c *MockSecretService_SearchItemsByTerm_Call) Run(run func(ctx context.Context, uid string, req *domain.SecretRequest)) *MockSecretService_SearchItemsByTerm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.SecretRequest
		if args[2] != nil {
			arg2 = args[2].(*domain.SecretRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSecretService_SearchItemsByTerm_Call) Return(secrets []domain.Secret, err error) *MockSecretService_SearchItemsByTerm_Call {
	_c.Call.Return(secrets, err)
	return _c
}

func (_c *MockSecretService_SearchItemsByTerm_Call) RunAndReturn(run func(ctx context.Context, uid string, req *domain.SecretRequest) ([]domain.Secret, error)) *MockSecretService_SearchItemsByTerm_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockSecretService
func (_mock *MockSecretService) Update(ctx context.Context, uid string, id string, req *domain.Secret) (int64, error) {
	ret := _mock.Called(ctx, uid, id, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, *domain.Secret) (int64, error)); ok {
		return returnFunc(ctx, uid, id, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, *domain.Secret) int64); ok {
		r0 = returnFunc(ctx, uid, id, req)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, *domain.Secret) error); ok {
		r1 = returnFunc(ctx, uid, id, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSecretService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockSecretService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - id string
//   - req *domain.Secret
func (_e *MockSecretService_Expecter) Update(ctx interface{}, uid interface{}, id interface{}, req interface{}) *MockSecretService_Update_Call {
	return &MockSecretService_Update_Call{Call: _e.mock.On("Update", ctx, uid, id, req)}
}

func (_c *MockSecretService_Update_Call) Run(run func(ctx context.Context, uid string, id string, req *domain.Secret)) *MockSecretService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 *domain.Secret
		if args[3] != nil {
			arg3 = args[3].(*domain.Secret)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockSecretService_Update_Call) Return(n int64, err error) *MockSecretService_Update_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockSecretService_Update_Call) RunAndReturn(run func(ctx context.Context, uid string, id string, req *domain.Secret) (int64, error)) *MockSecretService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEncryptedSecrets provides a mock function for the type MockSecretService
func (_mock *MockSecretService) UpdateEncryptedSecrets(ctx context.Context, uid string, items map[string]domain.EncryptSecret) error {
	ret := _mock.Called(ctx, uid, items)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEncryptedSecrets")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, map[string]domain.EncryptSecret) error); ok {
		r0 = returnFunc(ctx, uid, items)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSecretService_UpdateEncryptedSecrets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEncryptedSecrets'
type MockSecretService_UpdateEncryptedSecrets_Call struct {
	*mock.Call
}

// UpdateEncryptedSecrets is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - items map[string]domain.EncryptSecret
func (_e *MockSecretService_Expecter) UpdateEncryptedSecrets(ctx interface{}, uid interface{}, items interface{}) *MockSecretService_UpdateEncryptedSecrets_Call {
	return &MockSecretService_UpdateEncryptedSecrets_Call{Call: _e.mock.On("UpdateEncryptedSecrets", ctx, uid, items)}
}

func (_c *MockSecretService_UpdateEncryptedSecrets_Call) Run(run func(ctx context.Context, uid string, items map[string]domain.EncryptSecret)) *MockSecretService_UpdateEncryptedSecrets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 map[string]domain.EncryptSecret
		if args[2] != nil {
			arg2 = args[2].(map[string]domain.EncryptSecret)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSecretService_UpdateEncryptedSecrets_Call) Return(err error) *MockSecretService_UpdateEncryptedSecrets_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSecretService_UpdateEncryptedSecrets_Call) RunAndReturn(run func(ctx context.Context, uid string, items map[string]domain.EncryptSecret) error) *MockSecretService_UpdateEncryptedSecrets_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCryptoService creates a new instance of MockCryptoService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCryptoService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCryptoService {
	mock := &MockCryptoService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCryptoService is an autogenerated mock type for the CryptoService type
type MockCryptoService struct {
	mock.Mock
}

type MockCryptoService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCryptoService) EXPECT() *MockCryptoService_Expecter {
	return &MockCryptoService_Expecter{mock: &_m.Mock}
}

// Decrypt provides a mock function for the type MockCryptoService
func (_mock *MockCryptoService) Decrypt(ctx context.Context, nonce []byte, encoded []byte, key []byte) ([]byte, error) {
	ret := _mock.Called(ctx, nonce, encoded, key)

	if len(ret) == 0 {
		panic("no return value specified for Decrypt")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte, []byte, []byte) ([]byte, error)); ok {
		return returnFunc(ctx, nonce, encoded, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte, []byte, []byte) []byte); ok {
		r0 = returnFunc(ctx, nonce, encoded, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []byte, []byte, []byte) error); ok {
		r1 = returnFunc(ctx, nonce, encoded, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCryptoService_Decrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decrypt'
type MockCryptoService_Decrypt_Call struct {
	*mock.Call
}

// Decrypt is a helper method to define mock.On call
//   - ctx context.Context
//   - nonce []byte
//   - encoded []byte
//   - key []byte
func (_e *MockCryptoService_Expecter) Decrypt(ctx interface{}, nonce interface{}, encoded interface{}, key interface{}) *MockCryptoService_Decrypt_Call {
	return &MockCryptoService_Decrypt_Call{Call: _e.mock.On("Decrypt", ctx, nonce, encoded, key)}
}

func (_c *MockCryptoService_Decrypt_Call) Run(run func(ctx context.Context, nonce []byte, encoded []byte, key []byte)) *MockCryptoService_Decrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		var arg2 []byte
		if args[2] != nil {
			arg2 = args[2].([]byte)
		}
		var arg3 []byte
		if args[3] != nil {
			arg3 = args[3].([]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockCryptoService_Decrypt_Call) Return(decoded []byte, err error) *MockCryptoService_Decrypt_Call {
	_c.Call.Return(decoded, err)
	return _c
}

func (_c *MockCryptoService_Decrypt_Call) RunAndReturn(run func(ctx context.Context, nonce []byte, encoded []byte, key []byte) ([]byte, error)) *MockCryptoService_Decrypt_Call {
	_c.Call.Return(run)
	return _c
}

// Encrypt provides a mock function for the type MockCryptoService
func (_mock *MockCryptoService) Encrypt(ctx context.Context, req *domain.SecretEncodeRequest, key []byte) ([]byte, []byte, error) {
	ret := _mock.Called(ctx, req, key)

	if len(ret) == 0 {
		panic("no return value specified for Encrypt")
	}

	var r0 []byte
	var r1 []byte
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.SecretEncodeRequest, []byte) ([]byte, []byte, error)); ok {
		return returnFunc(ctx, req, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.SecretEncodeRequest, []byte) []byte); ok {
		r0 = returnFunc(ctx, req, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.SecretEncodeRequest, []byte) []byte); ok {
		r1 = returnFunc(ctx, req, key)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, *domain.SecretEncodeRequest, []byte) error); ok {
		r2 = returnFunc(ctx, req, key)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockCryptoService_Encrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encrypt'
type MockCryptoService_Encrypt_Call struct {
	*mock.Call
}

// Encrypt is a helper method to define mock.On call
//   - ctx context.Context
//   - req *domain.SecretEncodeRequest
//   - key []byte
func (_e *MockCryptoService_Expecter) Encrypt(ctx interface{}, req interface{}, key interface{}) *MockCryptoService_Encrypt_Call {
	return &MockCryptoService_Encrypt_Call{Call: _e.mock.On("Encrypt", ctx, req, key)}
}

func (_c *MockCryptoService_Encrypt_Call) Run(run func(ctx context.Context, req *domain.SecretEncodeRequest, key []byte)) *MockCryptoService_Encrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.SecretEncodeRequest
		if args[1] != nil {
			arg1 = args[1].(*domain.SecretEncodeRequest)
		}
		var arg2 []byte
		if args[2] != nil {
			arg2 = args[2].([]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCryptoService_Encrypt_Call) Return(nonce []byte, encoded []byte, err error) *MockCryptoService_Encrypt_Call {
	_c.Call.Return(nonce, encoded, err)
	return _c
}

func (_c *MockCryptoService_Encrypt_Call) RunAndReturn(run func(ctx context.Context, req *domain.SecretEncodeRequest, key []byte) ([]byte, []byte, error)) *MockCryptoService_Encrypt_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSystemStatsService creates a new instance of MockSystemStatsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSystemStatsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSystemStatsService {
	mock := &MockSystemStatsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSystemStatsService is an autogenerated mock type for the SystemStatsService type
type MockSystemStatsService struct {
	mock.Mock
}

type MockSystemStatsService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSystemStatsService) EXPECT() *MockSystemStatsService_Expecter {
	return &MockSystemStatsService_Expecter{mock: &_m.Mock}
}

// GetStats provides a mock function for the type MockSystemStatsService
func (_mock *MockSystemStatsService) GetStats(ctx context.Context, uid string) (*domain.SystemStats, error) {
	ret := _mock.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for GetStats")
	}

	var r0 *domain.SystemStats
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.SystemStats, error)); ok {
		return returnFunc(ctx, uid)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.SystemStats); ok {
		r0 = returnFunc(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.SystemStats)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSystemStatsService_GetStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStats'
type MockSystemStatsService_GetStats_Call struct {
	*mock.Call
}

// GetStats is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
func (_e *MockSystemStatsService_Expecter) GetStats(ctx interface{}, uid interface{}) *MockSystemStatsService_GetStats_Call {
	return &MockSystemStatsService_GetStats_Call{Call: _e.mock.On("GetStats", ctx, uid)}
}

func (_c *MockSystemStatsService_GetStats_Call) Run(run func(ctx context.Context, uid string)) *MockSystemStatsService_GetStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSystemStatsService_GetStats_Call) Return(systemStats *domain.SystemStats, err error) *MockSystemStatsService_GetStats_Call {
	_c.Call.Return(systemStats, err)
	return _c
}

func (_c *MockSystemStatsService_GetStats_Call) RunAndReturn(run func(ctx context.Context, uid string) (*domain.SystemStats, error)) *MockSystemStatsService_GetStats_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUsersService creates a new instance of MockUsersService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsersService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsersService {
	mock := &MockUsersService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUsersService is an autogenerated mock type for the UsersService type
type MockUsersService struct {
	mock.Mock
}

type MockUsersService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsersService) EXPECT() *MockUsersService_Expecter {
	return &MockUsersService_Expecter{mock: &_m.Mock}
}

// ChangePassword provides a mock function for the type MockUsersService
func (_mock *MockUsersService) ChangePassword(ctx context.Context, id string, newPassword string) error {
	ret := _mock.Called(ctx, id, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for ChangePassword")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, id, newPassword)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUsersService_ChangePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangePassword'
type MockUsersService_ChangePassword_Call struct {
	*mock.Call
}

// ChangePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - newPassword string
func (_e *MockUsersService_Expecter) ChangePassword(ctx interface{}, id interface{}, newPassword interface{}) *MockUsersService_ChangePassword_Call {
	return &MockUsersService_ChangePassword_Call{Call: _e.mock.On("ChangePassword", ctx, id, newPassword)}
}

func (_c *MockUsersService_ChangePassword_Call) Run(run func(ctx context.Context, id string, newPassword string)) *MockUsersService_ChangePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUsersService_ChangePassword_Call) Return(err error) *MockUsersService_ChangePassword_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUsersService_ChangePassword_Call) RunAndReturn(run func(ctx context.Context, id string, newPassword string) error) *MockUsersService_ChangePassword_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockUsersService
func (_mock *MockUsersService) Create(ctx context.Context, req *domain.User) (string, string, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.User) (string, string, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.User) string); ok {
		r0 = returnFunc(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.User) string); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, *domain.User) error); ok {
		r2 = returnFunc(ctx, req)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockUsersService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUsersService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - req *domain.User
func (_e *MockUsersService_Expecter) Create(ctx interface{}, req interface{}) *MockUsersService_Create_Call {
	return &MockUsersService_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *MockUsersService_Create_Call) Run(run func(ctx context.Context, req *domain.User)) *MockUsersService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.User
		if args[1] != nil {
			arg1 = args[1].(*domain.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsersService_Create_Call) Return(s string, s1 string, err error) *MockUsersService_Create_Call {
	_c.Call.Return(s, s1, err)
	return _c
}

func (_c *MockUsersService_Create_Call) RunAndReturn(run func(ctx context.Context, req *domain.User) (string, string, error)) *MockUsersService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDataDirectory provides a mock function for the type MockUsersService
func (_mock *MockUsersService) CreateDataDirectory(ctx context.Context, uid string) error {
	ret := _mock.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for CreateDataDirectory")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, uid)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUsersService_CreateDataDirectory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDataDirectory'
type MockUsersService_CreateDataDirectory_Call struct {
	*mock.Call
}

// CreateDataDirectory is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
func (_e *MockUsersService_Expecter) CreateDataDirectory(ctx interface{}, uid interface{}) *MockUsersService_CreateDataDirectory_Call {
	return &MockUsersService_CreateDataDirectory_Call{Call: _e.mock.On("CreateDataDirectory", ctx, uid)}
}

func (_c *MockUsersService_CreateDataDirectory_Call) Run(run func(ctx context.Context, uid string)) *MockUsersService_CreateDataDirectory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsersService_CreateDataDirectory_Call) Return(err error) *MockUsersService_CreateDataDirectory_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUsersService_CreateDataDirectory_Call) RunAndReturn(run func(ctx context.Context, uid string) error) *MockUsersService_CreateDataDirectory_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockUsersService
func (_mock *MockUsersService) Delete(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUsersService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockUsersService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUsersService_Expecter) Delete(ctx interface{}, id interface{}) *MockUsersService_Delete_Call {
	return &MockUsersService_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockUsersService_Delete_Call) Run(run func(ctx context.Context, id string)) *MockUsersService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsersService_Delete_Call) Return(err error) *MockUsersService_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUsersService_Delete_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockUsersService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthKey provides a mock function for the type MockUsersService
func (_mock *MockUsersService) GetAuthKey(ctx context.Context, id string) ([]byte, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthKey")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsersService_GetAuthKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthKey'
type MockUsersService_GetAuthKey_Call struct {
	*mock.Call
}

// GetAuthKey is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUsersService_Expecter) GetAuthKey(ctx interface{}, id interface{}) *MockUsersService_GetAuthKey_Call {
	return &MockUsersService_GetAuthKey_Call{Call: _e.mock.On("GetAuthKey", ctx, id)}
}

func (_c *MockUsersService_GetAuthKey_Call) Run(run func(ctx context.Context, id string)) *MockUsersService_GetAuthKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsersService_GetAuthKey_Call) Return(bytes []byte, err error) *MockUsersService_GetAuthKey_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockUsersService_GetAuthKey_Call) RunAndReturn(run func(ctx context.Context, id string) ([]byte, error)) *MockUsersService_GetAuthKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUsername provides a mock function for the type MockUsersService
func (_mock *MockUsersService) GetByUsername(ctx context.Context, username string) (*domain.User, error) {
	ret := _mock.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetByUsername")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return returnFunc(ctx, username)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = returnFunc(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, username)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsersService_GetByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUsername'
type MockUsersService_GetByUsername_Call struct {
	*mock.Call
}

// GetByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockUsersService_Expecter) GetByUsername(ctx interface{}, username interface{}) *MockUsersService_GetByUsername_Call {
	return &MockUsersService_GetByUsername_Call{Call: _e.mock.On("GetByUsername", ctx, username)}
}

func (_c *MockUsersService_GetByUsername_Call) Run(run func(ctx context.Context, username string)) *MockUsersService_GetByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsersService_GetByUsername_Call) Return(user *domain.User, err error) *MockUsersService_GetByUsername_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUsersService_GetByUsername_Call) RunAndReturn(run func(ctx context.Context, username string) (*domain.User, error)) *MockUsersService_GetByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetCount provides a mock function for the type MockUsersService
func (_mock *MockUsersService) GetCount(ctx context.Context, req *domain.UserRequest) (int64, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetCount")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.UserRequest) (int64, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.UserRequest) int64); ok {
		r0 = returnFunc(ctx, req)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.UserRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsersService_GetCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCount'
type MockUsersService_GetCount_Call struct {
	*mock.Call
}

// GetCount is a helper method to define mock.On call
//   - ctx context.Context
//   - req *domain.UserRequest
func (_e *MockUsersService_Expecter) GetCount(ctx interface{}, req interface{}) *MockUsersService_GetCount_Call {
	return &MockUsersService_GetCount_Call{Call: _e.mock.On("GetCount", ctx, req)}
}

func (_c *MockUsersService_GetCount_Call) Run(run func(ctx context.Context, req *domain.UserRequest)) *MockUsersService_GetCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.UserRequest
		if args[1] != nil {
			arg1 = args[1].(*domain.UserRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsersService_GetCount_Call) Return(n int64, err error) *MockUsersService_GetCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockUsersService_GetCount_Call) RunAndReturn(run func(ctx context.Context, req *domain.UserRequest) (int64, error)) *MockUsersService_GetCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetDiskUsage provides a mock function for the type MockUsersService
func (_mock *MockUsersService) GetDiskUsage(ctx context.Context, id string) (int64, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetDiskUsage")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsersService_GetDiskUsage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDiskUsage'
type MockUsersService_GetDiskUsage_Call struct {
	*mock.Call
}

// GetDiskUsage is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUsersService_Expecter) GetDiskUsage(ctx interface{}, id interface{}) *MockUsersService_GetDiskUsage_Call {
	return &MockUsersService_GetDiskUsage_Call{Call: _e.mock.On("GetDiskUsage", ctx, id)}
}

func (_c *MockUsersService_GetDiskUsage_Call) Run(run func(ctx context.Context, id string)) *MockUsersService_GetDiskUsage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsersService_GetDiskUsage_Call) Return(n int64, err error) *MockUsersService_GetDiskUsage_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockUsersService_GetDiskUsage_Call) RunAndReturn(run func(ctx context.Context, id string) (int64, error)) *MockUsersService_GetDiskUsage_Call {
	_c.Call.Return(run)
	return _c
}

// GetItem provides a mock function for the type MockUsersService
func (_mock *MockUsersService) GetItem(ctx context.Context, id string) (*domain.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetItem")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsersService_GetItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItem'
type MockUsersService_GetItem_Call struct {
	*mock.Call
}

// GetItem is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUsersService_Expecter) GetItem(ctx interface{}, id interface{}) *MockUsersService_GetItem_Call {
	return &MockUsersService_GetItem_Call{Call: _e.mock.On("GetItem", ctx, id)}
}

func (_c *MockUsersService_GetItem_Call) Run(run func(ctx context.Context, id string)) *MockUsersService_GetItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsersService_GetItem_Call) Return(user *domain.User, err error) *MockUsersService_GetItem_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUsersService_GetItem_Call) RunAndReturn(run func(ctx context.Context, id string) (*domain.User, error)) *MockUsersService_GetItem_Call {
	_c.Call.Return(run)
	return _c
}

// GetItems provides a mock function for the type MockUsersService
func (_mock *MockUsersService) GetItems(ctx context.Context, req *domain.UserRequest) ([]domain.User, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetItems")
	}

	var r0 []domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.UserRequest) ([]domain.User, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.UserRequest) []domain.User); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.UserRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsersService_GetItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItems'
type MockUsersService_GetItems_Call struct {
	*mock.Call
}

// GetItems is a helper method to define mock.On call
//   - ctx context.Context
//   - req *domain.UserRequest
func (_e *MockUsersService_Expecter) GetItems(ctx interface{}, req interface{}) *MockUsersService_GetItems_Call {
	return &MockUsersService_GetItems_Call{Call: _e.mock.On("GetItems", ctx, req)}
}

func (_c *MockUsersService_GetItems_Call) Run(run func(ctx context.Context, req *domain.UserRequest)) *MockUsersService_GetItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.UserRequest
		if args[1] != nil {
			arg1 = args[1].(*domain.UserRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsersService_GetItems_Call) Return(users []domain.User, err error) *MockUsersService_GetItems_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockUsersService_GetItems_Call) RunAndReturn(run func(ctx context.Context, req *domain.UserRequest) ([]domain.User, error)) *MockUsersService_GetItems_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserSettings provides a mock function for the type MockUsersService
func (_mock *MockUsersService) GetUserSettings(ctx context.Context, id string) (*domain.UserSettings, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSettings")
	}

	var r0 *domain.UserSettings
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.UserSettings, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.UserSettings); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserSettings)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsersService_GetUserSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserSettings'
type MockUsersService_GetUserSettings_Call struct {
	*mock.Call
}

// GetUserSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockUsersService_Expecter) GetUserSettings(ctx interface{}, id interface{}) *MockUsersService_GetUserSettings_Call {
	return &MockUsersService_GetUserSettings_Call{Call: _e.mock.On("GetUserSettings", ctx, id)}
}

func (_c *MockUsersService_GetUserSettings_Call) Run(run func(ctx context.Context, id string)) *MockUsersService_GetUserSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsersService_GetUserSettings_Call) Return(userSettings *domain.UserSettings, err error) *MockUsersService_GetUserSettings_Call {
	_c.Call.Return(userSettings, err)
	return _c
}

func (_c *MockUsersService_GetUserSettings_Call) RunAndReturn(run func(ctx context.Context, id string) (*domain.UserSettings, error)) *MockUsersService_GetUserSettings_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockUsersService
func (_mock *MockUsersService) Update(ctx context.Context, id string, req *domain.UserUpdate) (int64, error) {
	ret := _mock.Called(ctx, id, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.UserUpdate) (int64, error)); ok {
		return returnFunc(ctx, id, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.UserUpdate) int64); ok {
		r0 = returnFunc(ctx, id, req)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.UserUpdate) error); ok {
		r1 = returnFunc(ctx, id, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsersService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUsersService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - req *domain.UserUpdate
func (_e *MockUsersService_Expecter) Update(ctx interface{}, id interface{}, req interface{}) *MockUsersService_Update_Call {
	return &MockUsersService_Update_Call{Call: _e.mock.On("Update", ctx, id, req)}
}

func (_c *MockUsersService_Update_Call) Run(run func(ctx context.Context, id string, req *domain.UserUpdate)) *MockUsersService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.UserUpdate
		if args[2] != nil {
			arg2 = args[2].(*domain.UserUpdate)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUsersService_Update_Call) Return(n int64, err error) *MockUsersService_Update_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockUsersService_Update_Call) RunAndReturn(run func(ctx context.Context, id string, req *domain.UserUpdate) (int64, error)) *MockUsersService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAuthKey provides a mock function for the type MockUsersService
func (_mock *MockUsersService) UpdateAuthKey(ctx context.Context, uid string, newEncKey []byte) error {
	ret := _mock.Called(ctx, uid, newEncKey)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAuthKey")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []byte) error); ok {
		r0 = returnFunc(ctx, uid, newEncKey)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUsersService_UpdateAuthKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAuthKey'
type MockUsersService_UpdateAuthKey_Call struct {
	*mock.Call
}

// UpdateAuthKey is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - newEncKey []byte
func (_e *MockUsersService_Expecter) UpdateAuthKey(ctx interface{}, uid interface{}, newEncKey interface{}) *MockUsersService_UpdateAuthKey_Call {
	return &MockUsersService_UpdateAuthKey_Call{Call: _e.mock.On("UpdateAuthKey", ctx, uid, newEncKey)}
}

func (_c *MockUsersService_UpdateAuthKey_Call) Run(run func(ctx context.Context, uid string, newEncKey []byte)) *MockUsersService_UpdateAuthKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []byte
		if args[2] != nil {
			arg2 = args[2].([]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUsersService_UpdateAuthKey_Call) Return(err error) *MockUsersService_UpdateAuthKey_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUsersService_UpdateAuthKey_Call) RunAndReturn(run func(ctx context.Context, uid string, newEncKey []byte) error) *MockUsersService_UpdateAuthKey_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserSettings provides a mock function for the type MockUsersService
func (_mock *MockUsersService) UpdateUserSettings(ctx context.Context, id string, settings *domain.UserSettings) error {
	ret := _mock.Called(ctx, id, settings)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserSettings")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.UserSettings) error); ok {
		r0 = returnFunc(ctx, id, settings)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUsersService_UpdateUserSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserSettings'
type MockUsersService_UpdateUserSettings_Call struct {
	*mock.Call
}

// UpdateUserSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - settings *domain.UserSettings
func (_e *MockUsersService_Expecter) UpdateUserSettings(ctx interface{}, id interface{}, settings interface{}) *MockUsersService_UpdateUserSettings_Call {
	return &MockUsersService_UpdateUserSettings_Call{Call: _e.mock.On("UpdateUserSettings", ctx, id, settings)}
}

func (_c *MockUsersService_UpdateUserSettings_Call) Run(run func(ctx context.Context, id string, settings *domain.UserSettings)) *MockUsersService_UpdateUserSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.UserSettings
		if args[2] != nil {
			arg2 = args[2].(*domain.UserSettings)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUsersService_UpdateUserSettings_Call) Return(err error) *MockUsersService_UpdateUserSettings_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUsersService_UpdateUserSettings_Call) RunAndReturn(run func(ctx context.Context, id string, settings *domain.UserSettings) error) *MockUsersService_UpdateUserSettings_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateUser provides a mock function for the type MockUsersService
func (_mock *MockUsersService) ValidateUser(ctx context.Context, username string, password string) (string, error) {
	ret := _mock.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for ValidateUser")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return returnFunc(ctx, username, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = returnFunc(ctx, username, password)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsersService_ValidateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateUser'
type MockUsersService_ValidateUser_Call struct {
	*mock.Call
}

// ValidateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - password string
func (_e *MockUsersService_Expecter) ValidateUser(ctx interface{}, username interface{}, password interface{}) *MockUsersService_ValidateUser_Call {
	return &MockUsersService_ValidateUser_Call{Call: _e.mock.On("ValidateUser", ctx, username, password)}
}

func (_c *MockUsersService_ValidateUser_Call) Run(run func(ctx context.Context, username string, password string)) *MockUsersService_ValidateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUsersService_ValidateUser_Call) Return(s string, err error) *MockUsersService_ValidateUser_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockUsersService_ValidateUser_Call) RunAndReturn(run func(ctx context.Context, username string, password string) (string, error)) *MockUsersService_ValidateUser_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyUser provides a mock function for the type MockUsersService
func (_mock *MockUsersService) VerifyUser(ctx context.Context, token string) (*domain.User, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for VerifyUser")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = returnFunc(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsersService_VerifyUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyUser'
type MockUsersService_VerifyUser_Call struct {
	*mock.Call
}

// VerifyUser is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockUsersService_Expecter) VerifyUser(ctx interface{}, token interface{}) *MockUsersService_VerifyUser_Call {
	return &MockUsersService_VerifyUser_Call{Call: _e.mock.On("VerifyUser", ctx, token)}
}

func (_c *MockUsersService_VerifyUser_Call) Run(run func(ctx context.Context, token string)) *MockUsersService_VerifyUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsersService_VerifyUser_Call) Return(user *domain.User, err error) *MockUsersService_VerifyUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUsersService_VerifyUser_Call) RunAndReturn(run func(ctx context.Context, token string) (*domain.User, error)) *MockUsersService_VerifyUser_Call {
	_c.Call.Return(run)
	return _c
}
