// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package session

import (
	"database/sql"

	mock "github.com/stretchr/testify/mock"
)

// NewMockDB creates a new instance of MockDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDB {
	mock := &MockDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDB is an autogenerated mock type for the DB type
type MockDB struct {
	mock.Mock
}

type MockDB_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDB) EXPECT() *MockDB_Expecter {
	return &MockDB_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockDB
func (_mock *MockDB) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDB_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockDB_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockDB_Expecter) Close() *MockDB_Close_Call {
	return &MockDB_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockDB_Close_Call) Run(run func()) *MockDB_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDB_Close_Call) Return(err error) *MockDB_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDB_Close_Call) RunAndReturn(run func() error) *MockDB_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Exec provides a mock function for the type MockDB
func (_mock *MockDB) Exec(query string, args ...interface{}) (sql.Result, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(query, args)
	} else {
		tmpRet = _mock.Called(query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 sql.Result
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, ...interface{}) (sql.Result, error)); ok {
		return returnFunc(query, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(string, ...interface{}) sql.Result); ok {
		r0 = returnFunc(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = returnFunc(query, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDB_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockDB_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - query string
//   - args ...interface{}
func (_e *MockDB_Expecter) Exec(query interface{}, args ...interface{}) *MockDB_Exec_Call {
	return &MockDB_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{query}, args...)...)}
}

func (_c *MockDB_Exec_Call) Run(run func(query string, args ...interface{})) *MockDB_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []interface{}
		var variadicArgs []interface{}
		if len(args) > 1 {
			variadicArgs = args[1].([]interface{})
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockDB_Exec_Call) Return(result sql.Result, err error) *MockDB_Exec_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MockDB_Exec_Call) RunAndReturn(run func(query string, args ...interface{}) (sql.Result, error)) *MockDB_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// Prepare provides a mock function for the type MockDB
func (_mock *MockDB) Prepare(query string) (*sql.Stmt, error) {
	ret := _mock.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for Prepare")
	}

	var r0 *sql.Stmt
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*sql.Stmt, error)); ok {
		return returnFunc(query)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *sql.Stmt); ok {
		r0 = returnFunc(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Stmt)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(query)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDB_Prepare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Prepare'
type MockDB_Prepare_Call struct {
	*mock.Call
}

// Prepare is a helper method to define mock.On call
//   - query string
func (_e *MockDB_Expecter) Prepare(query interface{}) *MockDB_Prepare_Call {
	return &MockDB_Prepare_Call{Call: _e.mock.On("Prepare", query)}
}

func (_c *MockDB_Prepare_Call) Run(run func(query string)) *MockDB_Prepare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDB_Prepare_Call) Return(stmt *sql.Stmt, err error) *MockDB_Prepare_Call {
	_c.Call.Return(stmt, err)
	return _c
}

func (_c *MockDB_Prepare_Call) RunAndReturn(run func(query string) (*sql.Stmt, error)) *MockDB_Prepare_Call {
	_c.Call.Return(run)
	return _c
}
